import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import { DynamoDBServiceException as __BaseException } from "./DynamoDBServiceException";
export interface ArchivalSummary {
  ArchivalDateTime?: Date;
  ArchivalReason?: string;
  ArchivalBackupArn?: string;
}
export declare enum AttributeAction {
  ADD = "ADD",
  DELETE = "DELETE",
  PUT = "PUT",
}
export declare enum ScalarAttributeType {
  B = "B",
  N = "N",
  S = "S",
}
export interface AttributeDefinition {
  AttributeName: string | undefined;
  AttributeType: ScalarAttributeType | string | undefined;
}
export interface AutoScalingTargetTrackingScalingPolicyConfigurationDescription {
  DisableScaleIn?: boolean;
  ScaleInCooldown?: number;
  ScaleOutCooldown?: number;
  TargetValue: number | undefined;
}
export interface AutoScalingPolicyDescription {
  PolicyName?: string;
  TargetTrackingScalingPolicyConfiguration?: AutoScalingTargetTrackingScalingPolicyConfigurationDescription;
}
export interface AutoScalingTargetTrackingScalingPolicyConfigurationUpdate {
  DisableScaleIn?: boolean;
  ScaleInCooldown?: number;
  ScaleOutCooldown?: number;
  TargetValue: number | undefined;
}
export interface AutoScalingPolicyUpdate {
  PolicyName?: string;
  TargetTrackingScalingPolicyConfiguration:
    | AutoScalingTargetTrackingScalingPolicyConfigurationUpdate
    | undefined;
}
export interface AutoScalingSettingsDescription {
  MinimumUnits?: number;
  MaximumUnits?: number;
  AutoScalingDisabled?: boolean;
  AutoScalingRoleArn?: string;
  ScalingPolicies?: AutoScalingPolicyDescription[];
}
export interface AutoScalingSettingsUpdate {
  MinimumUnits?: number;
  MaximumUnits?: number;
  AutoScalingDisabled?: boolean;
  AutoScalingRoleArn?: string;
  ScalingPolicyUpdate?: AutoScalingPolicyUpdate;
}
export declare enum BackupStatus {
  AVAILABLE = "AVAILABLE",
  CREATING = "CREATING",
  DELETED = "DELETED",
}
export declare enum BackupType {
  AWS_BACKUP = "AWS_BACKUP",
  SYSTEM = "SYSTEM",
  USER = "USER",
}
export interface BackupDetails {
  BackupArn: string | undefined;
  BackupName: string | undefined;
  BackupSizeBytes?: number;
  BackupStatus: BackupStatus | string | undefined;
  BackupType: BackupType | string | undefined;
  BackupCreationDateTime: Date | undefined;
  BackupExpiryDateTime?: Date;
}
export declare enum BillingMode {
  PAY_PER_REQUEST = "PAY_PER_REQUEST",
  PROVISIONED = "PROVISIONED",
}
export declare enum KeyType {
  HASH = "HASH",
  RANGE = "RANGE",
}
export interface KeySchemaElement {
  AttributeName: string | undefined;
  KeyType: KeyType | string | undefined;
}
export interface ProvisionedThroughput {
  ReadCapacityUnits: number | undefined;
  WriteCapacityUnits: number | undefined;
}
export interface SourceTableDetails {
  TableName: string | undefined;
  TableId: string | undefined;
  TableArn?: string;
  TableSizeBytes?: number;
  KeySchema: KeySchemaElement[] | undefined;
  TableCreationDateTime: Date | undefined;
  ProvisionedThroughput: ProvisionedThroughput | undefined;
  ItemCount?: number;
  BillingMode?: BillingMode | string;
}
export declare enum ProjectionType {
  ALL = "ALL",
  INCLUDE = "INCLUDE",
  KEYS_ONLY = "KEYS_ONLY",
}
export interface Projection {
  ProjectionType?: ProjectionType | string;
  NonKeyAttributes?: string[];
}
export interface GlobalSecondaryIndexInfo {
  IndexName?: string;
  KeySchema?: KeySchemaElement[];
  Projection?: Projection;
  ProvisionedThroughput?: ProvisionedThroughput;
}
export interface LocalSecondaryIndexInfo {
  IndexName?: string;
  KeySchema?: KeySchemaElement[];
  Projection?: Projection;
}
export declare enum SSEType {
  AES256 = "AES256",
  KMS = "KMS",
}
export declare enum SSEStatus {
  DISABLED = "DISABLED",
  DISABLING = "DISABLING",
  ENABLED = "ENABLED",
  ENABLING = "ENABLING",
  UPDATING = "UPDATING",
}
export interface SSEDescription {
  Status?: SSEStatus | string;
  SSEType?: SSEType | string;
  KMSMasterKeyArn?: string;
  InaccessibleEncryptionDateTime?: Date;
}
export declare enum StreamViewType {
  KEYS_ONLY = "KEYS_ONLY",
  NEW_AND_OLD_IMAGES = "NEW_AND_OLD_IMAGES",
  NEW_IMAGE = "NEW_IMAGE",
  OLD_IMAGE = "OLD_IMAGE",
}
export interface StreamSpecification {
  StreamEnabled: boolean | undefined;
  StreamViewType?: StreamViewType | string;
}
export declare enum TimeToLiveStatus {
  DISABLED = "DISABLED",
  DISABLING = "DISABLING",
  ENABLED = "ENABLED",
  ENABLING = "ENABLING",
}
export interface TimeToLiveDescription {
  TimeToLiveStatus?: TimeToLiveStatus | string;
  AttributeName?: string;
}
export interface SourceTableFeatureDetails {
  LocalSecondaryIndexes?: LocalSecondaryIndexInfo[];
  GlobalSecondaryIndexes?: GlobalSecondaryIndexInfo[];
  StreamDescription?: StreamSpecification;
  TimeToLiveDescription?: TimeToLiveDescription;
  SSEDescription?: SSEDescription;
}
export interface BackupDescription {
  BackupDetails?: BackupDetails;
  SourceTableDetails?: SourceTableDetails;
  SourceTableFeatureDetails?: SourceTableFeatureDetails;
}
export declare class BackupInUseException extends __BaseException {
  readonly name: "BackupInUseException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<BackupInUseException, __BaseException>
  );
}
export declare class BackupNotFoundException extends __BaseException {
  readonly name: "BackupNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<BackupNotFoundException, __BaseException>
  );
}
export interface BackupSummary {
  TableName?: string;
  TableId?: string;
  TableArn?: string;
  BackupArn?: string;
  BackupName?: string;
  BackupCreationDateTime?: Date;
  BackupExpiryDateTime?: Date;
  BackupStatus?: BackupStatus | string;
  BackupType?: BackupType | string;
  BackupSizeBytes?: number;
}
export declare enum BackupTypeFilter {
  ALL = "ALL",
  AWS_BACKUP = "AWS_BACKUP",
  SYSTEM = "SYSTEM",
  USER = "USER",
}
export declare enum ReturnConsumedCapacity {
  INDEXES = "INDEXES",
  NONE = "NONE",
  TOTAL = "TOTAL",
}
export interface Capacity {
  ReadCapacityUnits?: number;
  WriteCapacityUnits?: number;
  CapacityUnits?: number;
}
export interface ConsumedCapacity {
  TableName?: string;
  CapacityUnits?: number;
  ReadCapacityUnits?: number;
  WriteCapacityUnits?: number;
  Table?: Capacity;
  LocalSecondaryIndexes?: Record<string, Capacity>;
  GlobalSecondaryIndexes?: Record<string, Capacity>;
}
export declare enum BatchStatementErrorCodeEnum {
  AccessDenied = "AccessDenied",
  ConditionalCheckFailed = "ConditionalCheckFailed",
  DuplicateItem = "DuplicateItem",
  InternalServerError = "InternalServerError",
  ItemCollectionSizeLimitExceeded = "ItemCollectionSizeLimitExceeded",
  ProvisionedThroughputExceeded = "ProvisionedThroughputExceeded",
  RequestLimitExceeded = "RequestLimitExceeded",
  ResourceNotFound = "ResourceNotFound",
  ThrottlingError = "ThrottlingError",
  TransactionConflict = "TransactionConflict",
  ValidationError = "ValidationError",
}
export interface BatchStatementError {
  Code?: BatchStatementErrorCodeEnum | string;
  Message?: string;
}
export declare class InternalServerError extends __BaseException {
  readonly name: "InternalServerError";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalServerError, __BaseException>
  );
}
export declare class RequestLimitExceeded extends __BaseException {
  readonly name: "RequestLimitExceeded";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<RequestLimitExceeded, __BaseException>
  );
}
export declare class InvalidEndpointException extends __BaseException {
  readonly name: "InvalidEndpointException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidEndpointException, __BaseException>
  );
}
export declare class ProvisionedThroughputExceededException extends __BaseException {
  readonly name: "ProvisionedThroughputExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      ProvisionedThroughputExceededException,
      __BaseException
    >
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare enum ReturnItemCollectionMetrics {
  NONE = "NONE",
  SIZE = "SIZE",
}
export declare class ItemCollectionSizeLimitExceededException extends __BaseException {
  readonly name: "ItemCollectionSizeLimitExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      ItemCollectionSizeLimitExceededException,
      __BaseException
    >
  );
}
export interface BillingModeSummary {
  BillingMode?: BillingMode | string;
  LastUpdateToPayPerRequestDateTime?: Date;
}
export declare enum ComparisonOperator {
  BEGINS_WITH = "BEGINS_WITH",
  BETWEEN = "BETWEEN",
  CONTAINS = "CONTAINS",
  EQ = "EQ",
  GE = "GE",
  GT = "GT",
  IN = "IN",
  LE = "LE",
  LT = "LT",
  NE = "NE",
  NOT_CONTAINS = "NOT_CONTAINS",
  NOT_NULL = "NOT_NULL",
  NULL = "NULL",
}
export declare class ConditionalCheckFailedException extends __BaseException {
  readonly name: "ConditionalCheckFailedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      ConditionalCheckFailedException,
      __BaseException
    >
  );
}
export declare enum ConditionalOperator {
  AND = "AND",
  OR = "OR",
}
export declare enum ReturnValuesOnConditionCheckFailure {
  ALL_OLD = "ALL_OLD",
  NONE = "NONE",
}
export declare enum ContinuousBackupsStatus {
  DISABLED = "DISABLED",
  ENABLED = "ENABLED",
}
export declare enum PointInTimeRecoveryStatus {
  DISABLED = "DISABLED",
  ENABLED = "ENABLED",
}
export interface PointInTimeRecoveryDescription {
  PointInTimeRecoveryStatus?: PointInTimeRecoveryStatus | string;
  EarliestRestorableDateTime?: Date;
  LatestRestorableDateTime?: Date;
}
export interface ContinuousBackupsDescription {
  ContinuousBackupsStatus: ContinuousBackupsStatus | string | undefined;
  PointInTimeRecoveryDescription?: PointInTimeRecoveryDescription;
}
export declare class ContinuousBackupsUnavailableException extends __BaseException {
  readonly name: "ContinuousBackupsUnavailableException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      ContinuousBackupsUnavailableException,
      __BaseException
    >
  );
}
export declare enum ContributorInsightsAction {
  DISABLE = "DISABLE",
  ENABLE = "ENABLE",
}
export declare enum ContributorInsightsStatus {
  DISABLED = "DISABLED",
  DISABLING = "DISABLING",
  ENABLED = "ENABLED",
  ENABLING = "ENABLING",
  FAILED = "FAILED",
}
export interface ContributorInsightsSummary {
  TableName?: string;
  IndexName?: string;
  ContributorInsightsStatus?: ContributorInsightsStatus | string;
}
export interface CreateBackupInput {
  TableName: string | undefined;
  BackupName: string | undefined;
}
export interface CreateBackupOutput {
  BackupDetails?: BackupDetails;
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export declare class TableInUseException extends __BaseException {
  readonly name: "TableInUseException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<TableInUseException, __BaseException>
  );
}
export declare class TableNotFoundException extends __BaseException {
  readonly name: "TableNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<TableNotFoundException, __BaseException>
  );
}
export interface CreateGlobalSecondaryIndexAction {
  IndexName: string | undefined;
  KeySchema: KeySchemaElement[] | undefined;
  Projection: Projection | undefined;
  ProvisionedThroughput?: ProvisionedThroughput;
}
export interface Replica {
  RegionName?: string;
}
export interface CreateGlobalTableInput {
  GlobalTableName: string | undefined;
  ReplicationGroup: Replica[] | undefined;
}
export declare enum GlobalTableStatus {
  ACTIVE = "ACTIVE",
  CREATING = "CREATING",
  DELETING = "DELETING",
  UPDATING = "UPDATING",
}
export interface ProvisionedThroughputOverride {
  ReadCapacityUnits?: number;
}
export interface ReplicaGlobalSecondaryIndexDescription {
  IndexName?: string;
  ProvisionedThroughputOverride?: ProvisionedThroughputOverride;
}
export declare enum ReplicaStatus {
  ACTIVE = "ACTIVE",
  CREATING = "CREATING",
  CREATION_FAILED = "CREATION_FAILED",
  DELETING = "DELETING",
  INACCESSIBLE_ENCRYPTION_CREDENTIALS = "INACCESSIBLE_ENCRYPTION_CREDENTIALS",
  REGION_DISABLED = "REGION_DISABLED",
  UPDATING = "UPDATING",
}
export declare enum TableClass {
  STANDARD = "STANDARD",
  STANDARD_INFREQUENT_ACCESS = "STANDARD_INFREQUENT_ACCESS",
}
export interface TableClassSummary {
  TableClass?: TableClass | string;
  LastUpdateDateTime?: Date;
}
export interface ReplicaDescription {
  RegionName?: string;
  ReplicaStatus?: ReplicaStatus | string;
  ReplicaStatusDescription?: string;
  ReplicaStatusPercentProgress?: string;
  KMSMasterKeyId?: string;
  ProvisionedThroughputOverride?: ProvisionedThroughputOverride;
  GlobalSecondaryIndexes?: ReplicaGlobalSecondaryIndexDescription[];
  ReplicaInaccessibleDateTime?: Date;
  ReplicaTableClassSummary?: TableClassSummary;
}
export interface GlobalTableDescription {
  ReplicationGroup?: ReplicaDescription[];
  GlobalTableArn?: string;
  CreationDateTime?: Date;
  GlobalTableStatus?: GlobalTableStatus | string;
  GlobalTableName?: string;
}
export interface CreateGlobalTableOutput {
  GlobalTableDescription?: GlobalTableDescription;
}
export declare class GlobalTableAlreadyExistsException extends __BaseException {
  readonly name: "GlobalTableAlreadyExistsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      GlobalTableAlreadyExistsException,
      __BaseException
    >
  );
}
export interface CreateReplicaAction {
  RegionName: string | undefined;
}
export interface ReplicaGlobalSecondaryIndex {
  IndexName: string | undefined;
  ProvisionedThroughputOverride?: ProvisionedThroughputOverride;
}
export interface CreateReplicationGroupMemberAction {
  RegionName: string | undefined;
  KMSMasterKeyId?: string;
  ProvisionedThroughputOverride?: ProvisionedThroughputOverride;
  GlobalSecondaryIndexes?: ReplicaGlobalSecondaryIndex[];
  TableClassOverride?: TableClass | string;
}
export interface GlobalSecondaryIndex {
  IndexName: string | undefined;
  KeySchema: KeySchemaElement[] | undefined;
  Projection: Projection | undefined;
  ProvisionedThroughput?: ProvisionedThroughput;
}
export interface LocalSecondaryIndex {
  IndexName: string | undefined;
  KeySchema: KeySchemaElement[] | undefined;
  Projection: Projection | undefined;
}
export interface SSESpecification {
  Enabled?: boolean;
  SSEType?: SSEType | string;
  KMSMasterKeyId?: string;
}
export interface Tag {
  Key: string | undefined;
  Value: string | undefined;
}
export interface CreateTableInput {
  AttributeDefinitions: AttributeDefinition[] | undefined;
  TableName: string | undefined;
  KeySchema: KeySchemaElement[] | undefined;
  LocalSecondaryIndexes?: LocalSecondaryIndex[];
  GlobalSecondaryIndexes?: GlobalSecondaryIndex[];
  BillingMode?: BillingMode | string;
  ProvisionedThroughput?: ProvisionedThroughput;
  StreamSpecification?: StreamSpecification;
  SSESpecification?: SSESpecification;
  Tags?: Tag[];
  TableClass?: TableClass | string;
  DeletionProtectionEnabled?: boolean;
}
export declare enum IndexStatus {
  ACTIVE = "ACTIVE",
  CREATING = "CREATING",
  DELETING = "DELETING",
  UPDATING = "UPDATING",
}
export interface ProvisionedThroughputDescription {
  LastIncreaseDateTime?: Date;
  LastDecreaseDateTime?: Date;
  NumberOfDecreasesToday?: number;
  ReadCapacityUnits?: number;
  WriteCapacityUnits?: number;
}
export interface GlobalSecondaryIndexDescription {
  IndexName?: string;
  KeySchema?: KeySchemaElement[];
  Projection?: Projection;
  IndexStatus?: IndexStatus | string;
  Backfilling?: boolean;
  ProvisionedThroughput?: ProvisionedThroughputDescription;
  IndexSizeBytes?: number;
  ItemCount?: number;
  IndexArn?: string;
}
export interface LocalSecondaryIndexDescription {
  IndexName?: string;
  KeySchema?: KeySchemaElement[];
  Projection?: Projection;
  IndexSizeBytes?: number;
  ItemCount?: number;
  IndexArn?: string;
}
export interface RestoreSummary {
  SourceBackupArn?: string;
  SourceTableArn?: string;
  RestoreDateTime: Date | undefined;
  RestoreInProgress: boolean | undefined;
}
export declare enum TableStatus {
  ACTIVE = "ACTIVE",
  ARCHIVED = "ARCHIVED",
  ARCHIVING = "ARCHIVING",
  CREATING = "CREATING",
  DELETING = "DELETING",
  INACCESSIBLE_ENCRYPTION_CREDENTIALS = "INACCESSIBLE_ENCRYPTION_CREDENTIALS",
  UPDATING = "UPDATING",
}
export interface TableDescription {
  AttributeDefinitions?: AttributeDefinition[];
  TableName?: string;
  KeySchema?: KeySchemaElement[];
  TableStatus?: TableStatus | string;
  CreationDateTime?: Date;
  ProvisionedThroughput?: ProvisionedThroughputDescription;
  TableSizeBytes?: number;
  ItemCount?: number;
  TableArn?: string;
  TableId?: string;
  BillingModeSummary?: BillingModeSummary;
  LocalSecondaryIndexes?: LocalSecondaryIndexDescription[];
  GlobalSecondaryIndexes?: GlobalSecondaryIndexDescription[];
  StreamSpecification?: StreamSpecification;
  LatestStreamLabel?: string;
  LatestStreamArn?: string;
  GlobalTableVersion?: string;
  Replicas?: ReplicaDescription[];
  RestoreSummary?: RestoreSummary;
  SSEDescription?: SSEDescription;
  ArchivalSummary?: ArchivalSummary;
  TableClassSummary?: TableClassSummary;
  DeletionProtectionEnabled?: boolean;
}
export interface CreateTableOutput {
  TableDescription?: TableDescription;
}
export declare class ResourceInUseException extends __BaseException {
  readonly name: "ResourceInUseException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceInUseException, __BaseException>
  );
}
export interface CsvOptions {
  Delimiter?: string;
  HeaderList?: string[];
}
export interface DeleteBackupInput {
  BackupArn: string | undefined;
}
export interface DeleteBackupOutput {
  BackupDescription?: BackupDescription;
}
export interface DeleteGlobalSecondaryIndexAction {
  IndexName: string | undefined;
}
export declare enum ReturnValue {
  ALL_NEW = "ALL_NEW",
  ALL_OLD = "ALL_OLD",
  NONE = "NONE",
  UPDATED_NEW = "UPDATED_NEW",
  UPDATED_OLD = "UPDATED_OLD",
}
export declare class TransactionConflictException extends __BaseException {
  readonly name: "TransactionConflictException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<TransactionConflictException, __BaseException>
  );
}
export interface DeleteReplicaAction {
  RegionName: string | undefined;
}
export interface DeleteReplicationGroupMemberAction {
  RegionName: string | undefined;
}
export interface DeleteTableInput {
  TableName: string | undefined;
}
export interface DeleteTableOutput {
  TableDescription?: TableDescription;
}
export interface DescribeBackupInput {
  BackupArn: string | undefined;
}
export interface DescribeBackupOutput {
  BackupDescription?: BackupDescription;
}
export interface DescribeContinuousBackupsInput {
  TableName: string | undefined;
}
export interface DescribeContinuousBackupsOutput {
  ContinuousBackupsDescription?: ContinuousBackupsDescription;
}
export interface DescribeContributorInsightsInput {
  TableName: string | undefined;
  IndexName?: string;
}
export interface FailureException {
  ExceptionName?: string;
  ExceptionDescription?: string;
}
export interface DescribeContributorInsightsOutput {
  TableName?: string;
  IndexName?: string;
  ContributorInsightsRuleList?: string[];
  ContributorInsightsStatus?: ContributorInsightsStatus | string;
  LastUpdateDateTime?: Date;
  FailureException?: FailureException;
}
export interface DescribeEndpointsRequest {}
export interface Endpoint {
  Address: string | undefined;
  CachePeriodInMinutes: number | undefined;
}
export interface DescribeEndpointsResponse {
  Endpoints: Endpoint[] | undefined;
}
export interface DescribeExportInput {
  ExportArn: string | undefined;
}
export declare enum ExportFormat {
  DYNAMODB_JSON = "DYNAMODB_JSON",
  ION = "ION",
}
export declare enum ExportStatus {
  COMPLETED = "COMPLETED",
  FAILED = "FAILED",
  IN_PROGRESS = "IN_PROGRESS",
}
export declare enum S3SseAlgorithm {
  AES256 = "AES256",
  KMS = "KMS",
}
export interface ExportDescription {
  ExportArn?: string;
  ExportStatus?: ExportStatus | string;
  StartTime?: Date;
  EndTime?: Date;
  ExportManifest?: string;
  TableArn?: string;
  TableId?: string;
  ExportTime?: Date;
  ClientToken?: string;
  S3Bucket?: string;
  S3BucketOwner?: string;
  S3Prefix?: string;
  S3SseAlgorithm?: S3SseAlgorithm | string;
  S3SseKmsKeyId?: string;
  FailureCode?: string;
  FailureMessage?: string;
  ExportFormat?: ExportFormat | string;
  BilledSizeBytes?: number;
  ItemCount?: number;
}
export interface DescribeExportOutput {
  ExportDescription?: ExportDescription;
}
export declare class ExportNotFoundException extends __BaseException {
  readonly name: "ExportNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ExportNotFoundException, __BaseException>
  );
}
export interface DescribeGlobalTableInput {
  GlobalTableName: string | undefined;
}
export interface DescribeGlobalTableOutput {
  GlobalTableDescription?: GlobalTableDescription;
}
export declare class GlobalTableNotFoundException extends __BaseException {
  readonly name: "GlobalTableNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<GlobalTableNotFoundException, __BaseException>
  );
}
export interface DescribeGlobalTableSettingsInput {
  GlobalTableName: string | undefined;
}
export interface ReplicaGlobalSecondaryIndexSettingsDescription {
  IndexName: string | undefined;
  IndexStatus?: IndexStatus | string;
  ProvisionedReadCapacityUnits?: number;
  ProvisionedReadCapacityAutoScalingSettings?: AutoScalingSettingsDescription;
  ProvisionedWriteCapacityUnits?: number;
  ProvisionedWriteCapacityAutoScalingSettings?: AutoScalingSettingsDescription;
}
export interface ReplicaSettingsDescription {
  RegionName: string | undefined;
  ReplicaStatus?: ReplicaStatus | string;
  ReplicaBillingModeSummary?: BillingModeSummary;
  ReplicaProvisionedReadCapacityUnits?: number;
  ReplicaProvisionedReadCapacityAutoScalingSettings?: AutoScalingSettingsDescription;
  ReplicaProvisionedWriteCapacityUnits?: number;
  ReplicaProvisionedWriteCapacityAutoScalingSettings?: AutoScalingSettingsDescription;
  ReplicaGlobalSecondaryIndexSettings?: ReplicaGlobalSecondaryIndexSettingsDescription[];
  ReplicaTableClassSummary?: TableClassSummary;
}
export interface DescribeGlobalTableSettingsOutput {
  GlobalTableName?: string;
  ReplicaSettings?: ReplicaSettingsDescription[];
}
export interface DescribeImportInput {
  ImportArn: string | undefined;
}
export declare enum ImportStatus {
  CANCELLED = "CANCELLED",
  CANCELLING = "CANCELLING",
  COMPLETED = "COMPLETED",
  FAILED = "FAILED",
  IN_PROGRESS = "IN_PROGRESS",
}
export declare enum InputCompressionType {
  GZIP = "GZIP",
  NONE = "NONE",
  ZSTD = "ZSTD",
}
export declare enum InputFormat {
  CSV = "CSV",
  DYNAMODB_JSON = "DYNAMODB_JSON",
  ION = "ION",
}
export interface InputFormatOptions {
  Csv?: CsvOptions;
}
export interface S3BucketSource {
  S3BucketOwner?: string;
  S3Bucket: string | undefined;
  S3KeyPrefix?: string;
}
export interface TableCreationParameters {
  TableName: string | undefined;
  AttributeDefinitions: AttributeDefinition[] | undefined;
  KeySchema: KeySchemaElement[] | undefined;
  BillingMode?: BillingMode | string;
  ProvisionedThroughput?: ProvisionedThroughput;
  SSESpecification?: SSESpecification;
  GlobalSecondaryIndexes?: GlobalSecondaryIndex[];
}
export interface ImportTableDescription {
  ImportArn?: string;
  ImportStatus?: ImportStatus | string;
  TableArn?: string;
  TableId?: string;
  ClientToken?: string;
  S3BucketSource?: S3BucketSource;
  ErrorCount?: number;
  CloudWatchLogGroupArn?: string;
  InputFormat?: InputFormat | string;
  InputFormatOptions?: InputFormatOptions;
  InputCompressionType?: InputCompressionType | string;
  TableCreationParameters?: TableCreationParameters;
  StartTime?: Date;
  EndTime?: Date;
  ProcessedSizeBytes?: number;
  ProcessedItemCount?: number;
  ImportedItemCount?: number;
  FailureCode?: string;
  FailureMessage?: string;
}
export interface DescribeImportOutput {
  ImportTableDescription: ImportTableDescription | undefined;
}
export declare class ImportNotFoundException extends __BaseException {
  readonly name: "ImportNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ImportNotFoundException, __BaseException>
  );
}
export interface DescribeKinesisStreamingDestinationInput {
  TableName: string | undefined;
}
export declare enum DestinationStatus {
  ACTIVE = "ACTIVE",
  DISABLED = "DISABLED",
  DISABLING = "DISABLING",
  ENABLE_FAILED = "ENABLE_FAILED",
  ENABLING = "ENABLING",
}
export interface KinesisDataStreamDestination {
  StreamArn?: string;
  DestinationStatus?: DestinationStatus | string;
  DestinationStatusDescription?: string;
}
export interface DescribeKinesisStreamingDestinationOutput {
  TableName?: string;
  KinesisDataStreamDestinations?: KinesisDataStreamDestination[];
}
export interface DescribeLimitsInput {}
export interface DescribeLimitsOutput {
  AccountMaxReadCapacityUnits?: number;
  AccountMaxWriteCapacityUnits?: number;
  TableMaxReadCapacityUnits?: number;
  TableMaxWriteCapacityUnits?: number;
}
export interface DescribeTableInput {
  TableName: string | undefined;
}
export interface DescribeTableOutput {
  Table?: TableDescription;
}
export interface DescribeTableReplicaAutoScalingInput {
  TableName: string | undefined;
}
export interface ReplicaGlobalSecondaryIndexAutoScalingDescription {
  IndexName?: string;
  IndexStatus?: IndexStatus | string;
  ProvisionedReadCapacityAutoScalingSettings?: AutoScalingSettingsDescription;
  ProvisionedWriteCapacityAutoScalingSettings?: AutoScalingSettingsDescription;
}
export interface ReplicaAutoScalingDescription {
  RegionName?: string;
  GlobalSecondaryIndexes?: ReplicaGlobalSecondaryIndexAutoScalingDescription[];
  ReplicaProvisionedReadCapacityAutoScalingSettings?: AutoScalingSettingsDescription;
  ReplicaProvisionedWriteCapacityAutoScalingSettings?: AutoScalingSettingsDescription;
  ReplicaStatus?: ReplicaStatus | string;
}
export interface TableAutoScalingDescription {
  TableName?: string;
  TableStatus?: TableStatus | string;
  Replicas?: ReplicaAutoScalingDescription[];
}
export interface DescribeTableReplicaAutoScalingOutput {
  TableAutoScalingDescription?: TableAutoScalingDescription;
}
export interface DescribeTimeToLiveInput {
  TableName: string | undefined;
}
export interface DescribeTimeToLiveOutput {
  TimeToLiveDescription?: TimeToLiveDescription;
}
export interface KinesisStreamingDestinationInput {
  TableName: string | undefined;
  StreamArn: string | undefined;
}
export interface KinesisStreamingDestinationOutput {
  TableName?: string;
  StreamArn?: string;
  DestinationStatus?: DestinationStatus | string;
}
export declare class DuplicateItemException extends __BaseException {
  readonly name: "DuplicateItemException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DuplicateItemException, __BaseException>
  );
}
export declare class IdempotentParameterMismatchException extends __BaseException {
  readonly name: "IdempotentParameterMismatchException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      IdempotentParameterMismatchException,
      __BaseException
    >
  );
}
export declare class TransactionInProgressException extends __BaseException {
  readonly name: "TransactionInProgressException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<TransactionInProgressException, __BaseException>
  );
}
export declare class ExportConflictException extends __BaseException {
  readonly name: "ExportConflictException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ExportConflictException, __BaseException>
  );
}
export interface ExportTableToPointInTimeInput {
  TableArn: string | undefined;
  ExportTime?: Date;
  ClientToken?: string;
  S3Bucket: string | undefined;
  S3BucketOwner?: string;
  S3Prefix?: string;
  S3SseAlgorithm?: S3SseAlgorithm | string;
  S3SseKmsKeyId?: string;
  ExportFormat?: ExportFormat | string;
}
export interface ExportTableToPointInTimeOutput {
  ExportDescription?: ExportDescription;
}
export declare class InvalidExportTimeException extends __BaseException {
  readonly name: "InvalidExportTimeException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidExportTimeException, __BaseException>
  );
}
export declare class PointInTimeRecoveryUnavailableException extends __BaseException {
  readonly name: "PointInTimeRecoveryUnavailableException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      PointInTimeRecoveryUnavailableException,
      __BaseException
    >
  );
}
export declare class ImportConflictException extends __BaseException {
  readonly name: "ImportConflictException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ImportConflictException, __BaseException>
  );
}
export interface ImportTableInput {
  ClientToken?: string;
  S3BucketSource: S3BucketSource | undefined;
  InputFormat: InputFormat | string | undefined;
  InputFormatOptions?: InputFormatOptions;
  InputCompressionType?: InputCompressionType | string;
  TableCreationParameters: TableCreationParameters | undefined;
}
export interface ImportTableOutput {
  ImportTableDescription: ImportTableDescription | undefined;
}
export interface ListBackupsInput {
  TableName?: string;
  Limit?: number;
  TimeRangeLowerBound?: Date;
  TimeRangeUpperBound?: Date;
  ExclusiveStartBackupArn?: string;
  BackupType?: BackupTypeFilter | string;
}
export interface ListBackupsOutput {
  BackupSummaries?: BackupSummary[];
  LastEvaluatedBackupArn?: string;
}
export interface ListContributorInsightsInput {
  TableName?: string;
  NextToken?: string;
  MaxResults?: number;
}
export interface ListContributorInsightsOutput {
  ContributorInsightsSummaries?: ContributorInsightsSummary[];
  NextToken?: string;
}
export interface ListExportsInput {
  TableArn?: string;
  MaxResults?: number;
  NextToken?: string;
}
export interface ExportSummary {
  ExportArn?: string;
  ExportStatus?: ExportStatus | string;
}
export interface ListExportsOutput {
  ExportSummaries?: ExportSummary[];
  NextToken?: string;
}
export interface ListGlobalTablesInput {
  ExclusiveStartGlobalTableName?: string;
  Limit?: number;
  RegionName?: string;
}
export interface GlobalTable {
  GlobalTableName?: string;
  ReplicationGroup?: Replica[];
}
export interface ListGlobalTablesOutput {
  GlobalTables?: GlobalTable[];
  LastEvaluatedGlobalTableName?: string;
}
export interface ListImportsInput {
  TableArn?: string;
  PageSize?: number;
  NextToken?: string;
}
export interface ImportSummary {
  ImportArn?: string;
  ImportStatus?: ImportStatus | string;
  TableArn?: string;
  S3BucketSource?: S3BucketSource;
  CloudWatchLogGroupArn?: string;
  InputFormat?: InputFormat | string;
  StartTime?: Date;
  EndTime?: Date;
}
export interface ListImportsOutput {
  ImportSummaryList?: ImportSummary[];
  NextToken?: string;
}
export interface ListTablesInput {
  ExclusiveStartTableName?: string;
  Limit?: number;
}
export interface ListTablesOutput {
  TableNames?: string[];
  LastEvaluatedTableName?: string;
}
export interface ListTagsOfResourceInput {
  ResourceArn: string | undefined;
  NextToken?: string;
}
export interface ListTagsOfResourceOutput {
  Tags?: Tag[];
  NextToken?: string;
}
export declare enum Select {
  ALL_ATTRIBUTES = "ALL_ATTRIBUTES",
  ALL_PROJECTED_ATTRIBUTES = "ALL_PROJECTED_ATTRIBUTES",
  COUNT = "COUNT",
  SPECIFIC_ATTRIBUTES = "SPECIFIC_ATTRIBUTES",
}
export interface RestoreTableFromBackupInput {
  TargetTableName: string | undefined;
  BackupArn: string | undefined;
  BillingModeOverride?: BillingMode | string;
  GlobalSecondaryIndexOverride?: GlobalSecondaryIndex[];
  LocalSecondaryIndexOverride?: LocalSecondaryIndex[];
  ProvisionedThroughputOverride?: ProvisionedThroughput;
  SSESpecificationOverride?: SSESpecification;
}
export interface RestoreTableFromBackupOutput {
  TableDescription?: TableDescription;
}
export declare class TableAlreadyExistsException extends __BaseException {
  readonly name: "TableAlreadyExistsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<TableAlreadyExistsException, __BaseException>
  );
}
export declare class InvalidRestoreTimeException extends __BaseException {
  readonly name: "InvalidRestoreTimeException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidRestoreTimeException, __BaseException>
  );
}
export interface RestoreTableToPointInTimeInput {
  SourceTableArn?: string;
  SourceTableName?: string;
  TargetTableName: string | undefined;
  UseLatestRestorableTime?: boolean;
  RestoreDateTime?: Date;
  BillingModeOverride?: BillingMode | string;
  GlobalSecondaryIndexOverride?: GlobalSecondaryIndex[];
  LocalSecondaryIndexOverride?: LocalSecondaryIndex[];
  ProvisionedThroughputOverride?: ProvisionedThroughput;
  SSESpecificationOverride?: SSESpecification;
}
export interface RestoreTableToPointInTimeOutput {
  TableDescription?: TableDescription;
}
export interface TagResourceInput {
  ResourceArn: string | undefined;
  Tags: Tag[] | undefined;
}
export interface UntagResourceInput {
  ResourceArn: string | undefined;
  TagKeys: string[] | undefined;
}
export interface PointInTimeRecoverySpecification {
  PointInTimeRecoveryEnabled: boolean | undefined;
}
export interface UpdateContinuousBackupsInput {
  TableName: string | undefined;
  PointInTimeRecoverySpecification:
    | PointInTimeRecoverySpecification
    | undefined;
}
export interface UpdateContinuousBackupsOutput {
  ContinuousBackupsDescription?: ContinuousBackupsDescription;
}
export interface UpdateContributorInsightsInput {
  TableName: string | undefined;
  IndexName?: string;
  ContributorInsightsAction: ContributorInsightsAction | string | undefined;
}
export interface UpdateContributorInsightsOutput {
  TableName?: string;
  IndexName?: string;
  ContributorInsightsStatus?: ContributorInsightsStatus | string;
}
export declare class ReplicaAlreadyExistsException extends __BaseException {
  readonly name: "ReplicaAlreadyExistsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ReplicaAlreadyExistsException, __BaseException>
  );
}
export declare class ReplicaNotFoundException extends __BaseException {
  readonly name: "ReplicaNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ReplicaNotFoundException, __BaseException>
  );
}
export interface ReplicaUpdate {
  Create?: CreateReplicaAction;
  Delete?: DeleteReplicaAction;
}
export interface UpdateGlobalTableInput {
  GlobalTableName: string | undefined;
  ReplicaUpdates: ReplicaUpdate[] | undefined;
}
export interface UpdateGlobalTableOutput {
  GlobalTableDescription?: GlobalTableDescription;
}
export declare class IndexNotFoundException extends __BaseException {
  readonly name: "IndexNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<IndexNotFoundException, __BaseException>
  );
}
export interface GlobalTableGlobalSecondaryIndexSettingsUpdate {
  IndexName: string | undefined;
  ProvisionedWriteCapacityUnits?: number;
  ProvisionedWriteCapacityAutoScalingSettingsUpdate?: AutoScalingSettingsUpdate;
}
export interface ReplicaGlobalSecondaryIndexSettingsUpdate {
  IndexName: string | undefined;
  ProvisionedReadCapacityUnits?: number;
  ProvisionedReadCapacityAutoScalingSettingsUpdate?: AutoScalingSettingsUpdate;
}
export interface ReplicaSettingsUpdate {
  RegionName: string | undefined;
  ReplicaProvisionedReadCapacityUnits?: number;
  ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate?: AutoScalingSettingsUpdate;
  ReplicaGlobalSecondaryIndexSettingsUpdate?: ReplicaGlobalSecondaryIndexSettingsUpdate[];
  ReplicaTableClass?: TableClass | string;
}
export interface UpdateGlobalTableSettingsInput {
  GlobalTableName: string | undefined;
  GlobalTableBillingMode?: BillingMode | string;
  GlobalTableProvisionedWriteCapacityUnits?: number;
  GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate?: AutoScalingSettingsUpdate;
  GlobalTableGlobalSecondaryIndexSettingsUpdate?: GlobalTableGlobalSecondaryIndexSettingsUpdate[];
  ReplicaSettingsUpdate?: ReplicaSettingsUpdate[];
}
export interface UpdateGlobalTableSettingsOutput {
  GlobalTableName?: string;
  ReplicaSettings?: ReplicaSettingsDescription[];
}
export interface UpdateGlobalSecondaryIndexAction {
  IndexName: string | undefined;
  ProvisionedThroughput: ProvisionedThroughput | undefined;
}
export interface GlobalSecondaryIndexUpdate {
  Update?: UpdateGlobalSecondaryIndexAction;
  Create?: CreateGlobalSecondaryIndexAction;
  Delete?: DeleteGlobalSecondaryIndexAction;
}
export interface UpdateReplicationGroupMemberAction {
  RegionName: string | undefined;
  KMSMasterKeyId?: string;
  ProvisionedThroughputOverride?: ProvisionedThroughputOverride;
  GlobalSecondaryIndexes?: ReplicaGlobalSecondaryIndex[];
  TableClassOverride?: TableClass | string;
}
export interface ReplicationGroupUpdate {
  Create?: CreateReplicationGroupMemberAction;
  Update?: UpdateReplicationGroupMemberAction;
  Delete?: DeleteReplicationGroupMemberAction;
}
export interface UpdateTableInput {
  AttributeDefinitions?: AttributeDefinition[];
  TableName: string | undefined;
  BillingMode?: BillingMode | string;
  ProvisionedThroughput?: ProvisionedThroughput;
  GlobalSecondaryIndexUpdates?: GlobalSecondaryIndexUpdate[];
  StreamSpecification?: StreamSpecification;
  SSESpecification?: SSESpecification;
  ReplicaUpdates?: ReplicationGroupUpdate[];
  TableClass?: TableClass | string;
  DeletionProtectionEnabled?: boolean;
}
export interface UpdateTableOutput {
  TableDescription?: TableDescription;
}
export interface GlobalSecondaryIndexAutoScalingUpdate {
  IndexName?: string;
  ProvisionedWriteCapacityAutoScalingUpdate?: AutoScalingSettingsUpdate;
}
export interface ReplicaGlobalSecondaryIndexAutoScalingUpdate {
  IndexName?: string;
  ProvisionedReadCapacityAutoScalingUpdate?: AutoScalingSettingsUpdate;
}
export interface ReplicaAutoScalingUpdate {
  RegionName: string | undefined;
  ReplicaGlobalSecondaryIndexUpdates?: ReplicaGlobalSecondaryIndexAutoScalingUpdate[];
  ReplicaProvisionedReadCapacityAutoScalingUpdate?: AutoScalingSettingsUpdate;
}
export interface UpdateTableReplicaAutoScalingInput {
  GlobalSecondaryIndexUpdates?: GlobalSecondaryIndexAutoScalingUpdate[];
  TableName: string | undefined;
  ProvisionedWriteCapacityAutoScalingUpdate?: AutoScalingSettingsUpdate;
  ReplicaUpdates?: ReplicaAutoScalingUpdate[];
}
export interface UpdateTableReplicaAutoScalingOutput {
  TableAutoScalingDescription?: TableAutoScalingDescription;
}
export interface TimeToLiveSpecification {
  Enabled: boolean | undefined;
  AttributeName: string | undefined;
}
export interface UpdateTimeToLiveInput {
  TableName: string | undefined;
  TimeToLiveSpecification: TimeToLiveSpecification | undefined;
}
export interface UpdateTimeToLiveOutput {
  TimeToLiveSpecification?: TimeToLiveSpecification;
}
export type AttributeValue =
  | AttributeValue.BMember
  | AttributeValue.BOOLMember
  | AttributeValue.BSMember
  | AttributeValue.LMember
  | AttributeValue.MMember
  | AttributeValue.NMember
  | AttributeValue.NSMember
  | AttributeValue.NULLMember
  | AttributeValue.SMember
  | AttributeValue.SSMember
  | AttributeValue.$UnknownMember;
export declare namespace AttributeValue {
  interface SMember {
    S: string;
    N?: never;
    B?: never;
    SS?: never;
    NS?: never;
    BS?: never;
    M?: never;
    L?: never;
    NULL?: never;
    BOOL?: never;
    $unknown?: never;
  }
  interface NMember {
    S?: never;
    N: string;
    B?: never;
    SS?: never;
    NS?: never;
    BS?: never;
    M?: never;
    L?: never;
    NULL?: never;
    BOOL?: never;
    $unknown?: never;
  }
  interface BMember {
    S?: never;
    N?: never;
    B: Uint8Array;
    SS?: never;
    NS?: never;
    BS?: never;
    M?: never;
    L?: never;
    NULL?: never;
    BOOL?: never;
    $unknown?: never;
  }
  interface SSMember {
    S?: never;
    N?: never;
    B?: never;
    SS: string[];
    NS?: never;
    BS?: never;
    M?: never;
    L?: never;
    NULL?: never;
    BOOL?: never;
    $unknown?: never;
  }
  interface NSMember {
    S?: never;
    N?: never;
    B?: never;
    SS?: never;
    NS: string[];
    BS?: never;
    M?: never;
    L?: never;
    NULL?: never;
    BOOL?: never;
    $unknown?: never;
  }
  interface BSMember {
    S?: never;
    N?: never;
    B?: never;
    SS?: never;
    NS?: never;
    BS: Uint8Array[];
    M?: never;
    L?: never;
    NULL?: never;
    BOOL?: never;
    $unknown?: never;
  }
  interface MMember {
    S?: never;
    N?: never;
    B?: never;
    SS?: never;
    NS?: never;
    BS?: never;
    M: Record<string, AttributeValue>;
    L?: never;
    NULL?: never;
    BOOL?: never;
    $unknown?: never;
  }
  interface LMember {
    S?: never;
    N?: never;
    B?: never;
    SS?: never;
    NS?: never;
    BS?: never;
    M?: never;
    L: AttributeValue[];
    NULL?: never;
    BOOL?: never;
    $unknown?: never;
  }
  interface NULLMember {
    S?: never;
    N?: never;
    B?: never;
    SS?: never;
    NS?: never;
    BS?: never;
    M?: never;
    L?: never;
    NULL: boolean;
    BOOL?: never;
    $unknown?: never;
  }
  interface BOOLMember {
    S?: never;
    N?: never;
    B?: never;
    SS?: never;
    NS?: never;
    BS?: never;
    M?: never;
    L?: never;
    NULL?: never;
    BOOL: boolean;
    $unknown?: never;
  }
  interface $UnknownMember {
    S?: never;
    N?: never;
    B?: never;
    SS?: never;
    NS?: never;
    BS?: never;
    M?: never;
    L?: never;
    NULL?: never;
    BOOL?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    S: (value: string) => T;
    N: (value: string) => T;
    B: (value: Uint8Array) => T;
    SS: (value: string[]) => T;
    NS: (value: string[]) => T;
    BS: (value: Uint8Array[]) => T;
    M: (value: Record<string, AttributeValue>) => T;
    L: (value: AttributeValue[]) => T;
    NULL: (value: boolean) => T;
    BOOL: (value: boolean) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: AttributeValue, visitor: Visitor<T>) => T;
}
export interface AttributeValueUpdate {
  Value?: AttributeValue;
  Action?: AttributeAction | string;
}
export interface BatchStatementRequest {
  Statement: string | undefined;
  Parameters?: AttributeValue[];
  ConsistentRead?: boolean;
}
export interface BatchStatementResponse {
  Error?: BatchStatementError;
  TableName?: string;
  Item?: Record<string, AttributeValue>;
}
export interface CancellationReason {
  Item?: Record<string, AttributeValue>;
  Code?: string;
  Message?: string;
}
export interface Condition {
  AttributeValueList?: AttributeValue[];
  ComparisonOperator: ComparisonOperator | string | undefined;
}
export interface DeleteRequest {
  Key: Record<string, AttributeValue> | undefined;
}
export interface ExecuteStatementInput {
  Statement: string | undefined;
  Parameters?: AttributeValue[];
  ConsistentRead?: boolean;
  NextToken?: string;
  ReturnConsumedCapacity?: ReturnConsumedCapacity | string;
  Limit?: number;
}
export interface Get {
  Key: Record<string, AttributeValue> | undefined;
  TableName: string | undefined;
  ProjectionExpression?: string;
  ExpressionAttributeNames?: Record<string, string>;
}
export interface GetItemInput {
  TableName: string | undefined;
  Key: Record<string, AttributeValue> | undefined;
  AttributesToGet?: string[];
  ConsistentRead?: boolean;
  ReturnConsumedCapacity?: ReturnConsumedCapacity | string;
  ProjectionExpression?: string;
  ExpressionAttributeNames?: Record<string, string>;
}
export interface GetItemOutput {
  Item?: Record<string, AttributeValue>;
  ConsumedCapacity?: ConsumedCapacity;
}
export interface ItemCollectionMetrics {
  ItemCollectionKey?: Record<string, AttributeValue>;
  SizeEstimateRangeGB?: number[];
}
export interface ItemResponse {
  Item?: Record<string, AttributeValue>;
}
export interface ParameterizedStatement {
  Statement: string | undefined;
  Parameters?: AttributeValue[];
}
export interface PutRequest {
  Item: Record<string, AttributeValue> | undefined;
}
export interface KeysAndAttributes {
  Keys: Record<string, AttributeValue>[] | undefined;
  AttributesToGet?: string[];
  ConsistentRead?: boolean;
  ProjectionExpression?: string;
  ExpressionAttributeNames?: Record<string, string>;
}
export interface TransactGetItem {
  Get: Get | undefined;
}
export interface BatchExecuteStatementInput {
  Statements: BatchStatementRequest[] | undefined;
  ReturnConsumedCapacity?: ReturnConsumedCapacity | string;
}
export interface BatchExecuteStatementOutput {
  Responses?: BatchStatementResponse[];
  ConsumedCapacity?: ConsumedCapacity[];
}
export interface ExecuteTransactionInput {
  TransactStatements: ParameterizedStatement[] | undefined;
  ClientRequestToken?: string;
  ReturnConsumedCapacity?: ReturnConsumedCapacity | string;
}
export interface ExecuteTransactionOutput {
  Responses?: ItemResponse[];
  ConsumedCapacity?: ConsumedCapacity[];
}
export interface TransactGetItemsOutput {
  ConsumedCapacity?: ConsumedCapacity[];
  Responses?: ItemResponse[];
}
export declare class TransactionCanceledException extends __BaseException {
  readonly name: "TransactionCanceledException";
  readonly $fault: "client";
  Message?: string;
  CancellationReasons?: CancellationReason[];
  constructor(
    opts: __ExceptionOptionType<TransactionCanceledException, __BaseException>
  );
}
export interface BatchGetItemInput {
  RequestItems: Record<string, KeysAndAttributes> | undefined;
  ReturnConsumedCapacity?: ReturnConsumedCapacity | string;
}
export interface ExpectedAttributeValue {
  Value?: AttributeValue;
  Exists?: boolean;
  ComparisonOperator?: ComparisonOperator | string;
  AttributeValueList?: AttributeValue[];
}
export interface TransactGetItemsInput {
  TransactItems: TransactGetItem[] | undefined;
  ReturnConsumedCapacity?: ReturnConsumedCapacity | string;
}
export interface TransactWriteItemsOutput {
  ConsumedCapacity?: ConsumedCapacity[];
  ItemCollectionMetrics?: Record<string, ItemCollectionMetrics[]>;
}
export interface ConditionCheck {
  Key: Record<string, AttributeValue> | undefined;
  TableName: string | undefined;
  ConditionExpression: string | undefined;
  ExpressionAttributeNames?: Record<string, string>;
  ExpressionAttributeValues?: Record<string, AttributeValue>;
  ReturnValuesOnConditionCheckFailure?:
    | ReturnValuesOnConditionCheckFailure
    | string;
}
export interface Delete {
  Key: Record<string, AttributeValue> | undefined;
  TableName: string | undefined;
  ConditionExpression?: string;
  ExpressionAttributeNames?: Record<string, string>;
  ExpressionAttributeValues?: Record<string, AttributeValue>;
  ReturnValuesOnConditionCheckFailure?:
    | ReturnValuesOnConditionCheckFailure
    | string;
}
export interface Put {
  Item: Record<string, AttributeValue> | undefined;
  TableName: string | undefined;
  ConditionExpression?: string;
  ExpressionAttributeNames?: Record<string, string>;
  ExpressionAttributeValues?: Record<string, AttributeValue>;
  ReturnValuesOnConditionCheckFailure?:
    | ReturnValuesOnConditionCheckFailure
    | string;
}
export interface Update {
  Key: Record<string, AttributeValue> | undefined;
  UpdateExpression: string | undefined;
  TableName: string | undefined;
  ConditionExpression?: string;
  ExpressionAttributeNames?: Record<string, string>;
  ExpressionAttributeValues?: Record<string, AttributeValue>;
  ReturnValuesOnConditionCheckFailure?:
    | ReturnValuesOnConditionCheckFailure
    | string;
}
export interface DeleteItemOutput {
  Attributes?: Record<string, AttributeValue>;
  ConsumedCapacity?: ConsumedCapacity;
  ItemCollectionMetrics?: ItemCollectionMetrics;
}
export interface ExecuteStatementOutput {
  Items?: Record<string, AttributeValue>[];
  NextToken?: string;
  ConsumedCapacity?: ConsumedCapacity;
  LastEvaluatedKey?: Record<string, AttributeValue>;
}
export interface PutItemOutput {
  Attributes?: Record<string, AttributeValue>;
  ConsumedCapacity?: ConsumedCapacity;
  ItemCollectionMetrics?: ItemCollectionMetrics;
}
export interface QueryOutput {
  Items?: Record<string, AttributeValue>[];
  Count?: number;
  ScannedCount?: number;
  LastEvaluatedKey?: Record<string, AttributeValue>;
  ConsumedCapacity?: ConsumedCapacity;
}
export interface ScanOutput {
  Items?: Record<string, AttributeValue>[];
  Count?: number;
  ScannedCount?: number;
  LastEvaluatedKey?: Record<string, AttributeValue>;
  ConsumedCapacity?: ConsumedCapacity;
}
export interface UpdateItemOutput {
  Attributes?: Record<string, AttributeValue>;
  ConsumedCapacity?: ConsumedCapacity;
  ItemCollectionMetrics?: ItemCollectionMetrics;
}
export interface WriteRequest {
  PutRequest?: PutRequest;
  DeleteRequest?: DeleteRequest;
}
export interface BatchGetItemOutput {
  Responses?: Record<string, Record<string, AttributeValue>[]>;
  UnprocessedKeys?: Record<string, KeysAndAttributes>;
  ConsumedCapacity?: ConsumedCapacity[];
}
export interface ScanInput {
  TableName: string | undefined;
  IndexName?: string;
  AttributesToGet?: string[];
  Limit?: number;
  Select?: Select | string;
  ScanFilter?: Record<string, Condition>;
  ConditionalOperator?: ConditionalOperator | string;
  ExclusiveStartKey?: Record<string, AttributeValue>;
  ReturnConsumedCapacity?: ReturnConsumedCapacity | string;
  TotalSegments?: number;
  Segment?: number;
  ProjectionExpression?: string;
  FilterExpression?: string;
  ExpressionAttributeNames?: Record<string, string>;
  ExpressionAttributeValues?: Record<string, AttributeValue>;
  ConsistentRead?: boolean;
}
export interface BatchWriteItemInput {
  RequestItems: Record<string, WriteRequest[]> | undefined;
  ReturnConsumedCapacity?: ReturnConsumedCapacity | string;
  ReturnItemCollectionMetrics?: ReturnItemCollectionMetrics | string;
}
export interface DeleteItemInput {
  TableName: string | undefined;
  Key: Record<string, AttributeValue> | undefined;
  Expected?: Record<string, ExpectedAttributeValue>;
  ConditionalOperator?: ConditionalOperator | string;
  ReturnValues?: ReturnValue | string;
  ReturnConsumedCapacity?: ReturnConsumedCapacity | string;
  ReturnItemCollectionMetrics?: ReturnItemCollectionMetrics | string;
  ConditionExpression?: string;
  ExpressionAttributeNames?: Record<string, string>;
  ExpressionAttributeValues?: Record<string, AttributeValue>;
}
export interface PutItemInput {
  TableName: string | undefined;
  Item: Record<string, AttributeValue> | undefined;
  Expected?: Record<string, ExpectedAttributeValue>;
  ReturnValues?: ReturnValue | string;
  ReturnConsumedCapacity?: ReturnConsumedCapacity | string;
  ReturnItemCollectionMetrics?: ReturnItemCollectionMetrics | string;
  ConditionalOperator?: ConditionalOperator | string;
  ConditionExpression?: string;
  ExpressionAttributeNames?: Record<string, string>;
  ExpressionAttributeValues?: Record<string, AttributeValue>;
}
export interface QueryInput {
  TableName: string | undefined;
  IndexName?: string;
  Select?: Select | string;
  AttributesToGet?: string[];
  Limit?: number;
  ConsistentRead?: boolean;
  KeyConditions?: Record<string, Condition>;
  QueryFilter?: Record<string, Condition>;
  ConditionalOperator?: ConditionalOperator | string;
  ScanIndexForward?: boolean;
  ExclusiveStartKey?: Record<string, AttributeValue>;
  ReturnConsumedCapacity?: ReturnConsumedCapacity | string;
  ProjectionExpression?: string;
  FilterExpression?: string;
  KeyConditionExpression?: string;
  ExpressionAttributeNames?: Record<string, string>;
  ExpressionAttributeValues?: Record<string, AttributeValue>;
}
export interface BatchWriteItemOutput {
  UnprocessedItems?: Record<string, WriteRequest[]>;
  ItemCollectionMetrics?: Record<string, ItemCollectionMetrics[]>;
  ConsumedCapacity?: ConsumedCapacity[];
}
export interface UpdateItemInput {
  TableName: string | undefined;
  Key: Record<string, AttributeValue> | undefined;
  AttributeUpdates?: Record<string, AttributeValueUpdate>;
  Expected?: Record<string, ExpectedAttributeValue>;
  ConditionalOperator?: ConditionalOperator | string;
  ReturnValues?: ReturnValue | string;
  ReturnConsumedCapacity?: ReturnConsumedCapacity | string;
  ReturnItemCollectionMetrics?: ReturnItemCollectionMetrics | string;
  UpdateExpression?: string;
  ConditionExpression?: string;
  ExpressionAttributeNames?: Record<string, string>;
  ExpressionAttributeValues?: Record<string, AttributeValue>;
}
export interface TransactWriteItem {
  ConditionCheck?: ConditionCheck;
  Put?: Put;
  Delete?: Delete;
  Update?: Update;
}
export interface TransactWriteItemsInput {
  TransactItems: TransactWriteItem[] | undefined;
  ReturnConsumedCapacity?: ReturnConsumedCapacity | string;
  ReturnItemCollectionMetrics?: ReturnItemCollectionMetrics | string;
  ClientRequestToken?: string;
}
