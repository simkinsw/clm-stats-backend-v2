import { DynamoDBServiceException as __BaseException } from "./DynamoDBServiceException";
export var AttributeAction;
(function (AttributeAction) {
    AttributeAction["ADD"] = "ADD";
    AttributeAction["DELETE"] = "DELETE";
    AttributeAction["PUT"] = "PUT";
})(AttributeAction || (AttributeAction = {}));
export var ScalarAttributeType;
(function (ScalarAttributeType) {
    ScalarAttributeType["B"] = "B";
    ScalarAttributeType["N"] = "N";
    ScalarAttributeType["S"] = "S";
})(ScalarAttributeType || (ScalarAttributeType = {}));
export var BackupStatus;
(function (BackupStatus) {
    BackupStatus["AVAILABLE"] = "AVAILABLE";
    BackupStatus["CREATING"] = "CREATING";
    BackupStatus["DELETED"] = "DELETED";
})(BackupStatus || (BackupStatus = {}));
export var BackupType;
(function (BackupType) {
    BackupType["AWS_BACKUP"] = "AWS_BACKUP";
    BackupType["SYSTEM"] = "SYSTEM";
    BackupType["USER"] = "USER";
})(BackupType || (BackupType = {}));
export var BillingMode;
(function (BillingMode) {
    BillingMode["PAY_PER_REQUEST"] = "PAY_PER_REQUEST";
    BillingMode["PROVISIONED"] = "PROVISIONED";
})(BillingMode || (BillingMode = {}));
export var KeyType;
(function (KeyType) {
    KeyType["HASH"] = "HASH";
    KeyType["RANGE"] = "RANGE";
})(KeyType || (KeyType = {}));
export var ProjectionType;
(function (ProjectionType) {
    ProjectionType["ALL"] = "ALL";
    ProjectionType["INCLUDE"] = "INCLUDE";
    ProjectionType["KEYS_ONLY"] = "KEYS_ONLY";
})(ProjectionType || (ProjectionType = {}));
export var SSEType;
(function (SSEType) {
    SSEType["AES256"] = "AES256";
    SSEType["KMS"] = "KMS";
})(SSEType || (SSEType = {}));
export var SSEStatus;
(function (SSEStatus) {
    SSEStatus["DISABLED"] = "DISABLED";
    SSEStatus["DISABLING"] = "DISABLING";
    SSEStatus["ENABLED"] = "ENABLED";
    SSEStatus["ENABLING"] = "ENABLING";
    SSEStatus["UPDATING"] = "UPDATING";
})(SSEStatus || (SSEStatus = {}));
export var StreamViewType;
(function (StreamViewType) {
    StreamViewType["KEYS_ONLY"] = "KEYS_ONLY";
    StreamViewType["NEW_AND_OLD_IMAGES"] = "NEW_AND_OLD_IMAGES";
    StreamViewType["NEW_IMAGE"] = "NEW_IMAGE";
    StreamViewType["OLD_IMAGE"] = "OLD_IMAGE";
})(StreamViewType || (StreamViewType = {}));
export var TimeToLiveStatus;
(function (TimeToLiveStatus) {
    TimeToLiveStatus["DISABLED"] = "DISABLED";
    TimeToLiveStatus["DISABLING"] = "DISABLING";
    TimeToLiveStatus["ENABLED"] = "ENABLED";
    TimeToLiveStatus["ENABLING"] = "ENABLING";
})(TimeToLiveStatus || (TimeToLiveStatus = {}));
export class BackupInUseException extends __BaseException {
    constructor(opts) {
        super({
            name: "BackupInUseException",
            $fault: "client",
            ...opts,
        });
        this.name = "BackupInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BackupInUseException.prototype);
    }
}
export class BackupNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "BackupNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "BackupNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BackupNotFoundException.prototype);
    }
}
export var BackupTypeFilter;
(function (BackupTypeFilter) {
    BackupTypeFilter["ALL"] = "ALL";
    BackupTypeFilter["AWS_BACKUP"] = "AWS_BACKUP";
    BackupTypeFilter["SYSTEM"] = "SYSTEM";
    BackupTypeFilter["USER"] = "USER";
})(BackupTypeFilter || (BackupTypeFilter = {}));
export var ReturnConsumedCapacity;
(function (ReturnConsumedCapacity) {
    ReturnConsumedCapacity["INDEXES"] = "INDEXES";
    ReturnConsumedCapacity["NONE"] = "NONE";
    ReturnConsumedCapacity["TOTAL"] = "TOTAL";
})(ReturnConsumedCapacity || (ReturnConsumedCapacity = {}));
export var BatchStatementErrorCodeEnum;
(function (BatchStatementErrorCodeEnum) {
    BatchStatementErrorCodeEnum["AccessDenied"] = "AccessDenied";
    BatchStatementErrorCodeEnum["ConditionalCheckFailed"] = "ConditionalCheckFailed";
    BatchStatementErrorCodeEnum["DuplicateItem"] = "DuplicateItem";
    BatchStatementErrorCodeEnum["InternalServerError"] = "InternalServerError";
    BatchStatementErrorCodeEnum["ItemCollectionSizeLimitExceeded"] = "ItemCollectionSizeLimitExceeded";
    BatchStatementErrorCodeEnum["ProvisionedThroughputExceeded"] = "ProvisionedThroughputExceeded";
    BatchStatementErrorCodeEnum["RequestLimitExceeded"] = "RequestLimitExceeded";
    BatchStatementErrorCodeEnum["ResourceNotFound"] = "ResourceNotFound";
    BatchStatementErrorCodeEnum["ThrottlingError"] = "ThrottlingError";
    BatchStatementErrorCodeEnum["TransactionConflict"] = "TransactionConflict";
    BatchStatementErrorCodeEnum["ValidationError"] = "ValidationError";
})(BatchStatementErrorCodeEnum || (BatchStatementErrorCodeEnum = {}));
export class InternalServerError extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerError",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerError";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerError.prototype);
    }
}
export class RequestLimitExceeded extends __BaseException {
    constructor(opts) {
        super({
            name: "RequestLimitExceeded",
            $fault: "client",
            ...opts,
        });
        this.name = "RequestLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, RequestLimitExceeded.prototype);
    }
}
export class InvalidEndpointException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidEndpointException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidEndpointException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidEndpointException.prototype);
        this.Message = opts.Message;
    }
}
export class ProvisionedThroughputExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ProvisionedThroughputExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ProvisionedThroughputExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ProvisionedThroughputExceededException.prototype);
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
export var ReturnItemCollectionMetrics;
(function (ReturnItemCollectionMetrics) {
    ReturnItemCollectionMetrics["NONE"] = "NONE";
    ReturnItemCollectionMetrics["SIZE"] = "SIZE";
})(ReturnItemCollectionMetrics || (ReturnItemCollectionMetrics = {}));
export class ItemCollectionSizeLimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ItemCollectionSizeLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ItemCollectionSizeLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ItemCollectionSizeLimitExceededException.prototype);
    }
}
export var ComparisonOperator;
(function (ComparisonOperator) {
    ComparisonOperator["BEGINS_WITH"] = "BEGINS_WITH";
    ComparisonOperator["BETWEEN"] = "BETWEEN";
    ComparisonOperator["CONTAINS"] = "CONTAINS";
    ComparisonOperator["EQ"] = "EQ";
    ComparisonOperator["GE"] = "GE";
    ComparisonOperator["GT"] = "GT";
    ComparisonOperator["IN"] = "IN";
    ComparisonOperator["LE"] = "LE";
    ComparisonOperator["LT"] = "LT";
    ComparisonOperator["NE"] = "NE";
    ComparisonOperator["NOT_CONTAINS"] = "NOT_CONTAINS";
    ComparisonOperator["NOT_NULL"] = "NOT_NULL";
    ComparisonOperator["NULL"] = "NULL";
})(ComparisonOperator || (ComparisonOperator = {}));
export class ConditionalCheckFailedException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConditionalCheckFailedException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConditionalCheckFailedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConditionalCheckFailedException.prototype);
    }
}
export var ConditionalOperator;
(function (ConditionalOperator) {
    ConditionalOperator["AND"] = "AND";
    ConditionalOperator["OR"] = "OR";
})(ConditionalOperator || (ConditionalOperator = {}));
export var ReturnValuesOnConditionCheckFailure;
(function (ReturnValuesOnConditionCheckFailure) {
    ReturnValuesOnConditionCheckFailure["ALL_OLD"] = "ALL_OLD";
    ReturnValuesOnConditionCheckFailure["NONE"] = "NONE";
})(ReturnValuesOnConditionCheckFailure || (ReturnValuesOnConditionCheckFailure = {}));
export var ContinuousBackupsStatus;
(function (ContinuousBackupsStatus) {
    ContinuousBackupsStatus["DISABLED"] = "DISABLED";
    ContinuousBackupsStatus["ENABLED"] = "ENABLED";
})(ContinuousBackupsStatus || (ContinuousBackupsStatus = {}));
export var PointInTimeRecoveryStatus;
(function (PointInTimeRecoveryStatus) {
    PointInTimeRecoveryStatus["DISABLED"] = "DISABLED";
    PointInTimeRecoveryStatus["ENABLED"] = "ENABLED";
})(PointInTimeRecoveryStatus || (PointInTimeRecoveryStatus = {}));
export class ContinuousBackupsUnavailableException extends __BaseException {
    constructor(opts) {
        super({
            name: "ContinuousBackupsUnavailableException",
            $fault: "client",
            ...opts,
        });
        this.name = "ContinuousBackupsUnavailableException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ContinuousBackupsUnavailableException.prototype);
    }
}
export var ContributorInsightsAction;
(function (ContributorInsightsAction) {
    ContributorInsightsAction["DISABLE"] = "DISABLE";
    ContributorInsightsAction["ENABLE"] = "ENABLE";
})(ContributorInsightsAction || (ContributorInsightsAction = {}));
export var ContributorInsightsStatus;
(function (ContributorInsightsStatus) {
    ContributorInsightsStatus["DISABLED"] = "DISABLED";
    ContributorInsightsStatus["DISABLING"] = "DISABLING";
    ContributorInsightsStatus["ENABLED"] = "ENABLED";
    ContributorInsightsStatus["ENABLING"] = "ENABLING";
    ContributorInsightsStatus["FAILED"] = "FAILED";
})(ContributorInsightsStatus || (ContributorInsightsStatus = {}));
export class LimitExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
export class TableInUseException extends __BaseException {
    constructor(opts) {
        super({
            name: "TableInUseException",
            $fault: "client",
            ...opts,
        });
        this.name = "TableInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TableInUseException.prototype);
    }
}
export class TableNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "TableNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "TableNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TableNotFoundException.prototype);
    }
}
export var GlobalTableStatus;
(function (GlobalTableStatus) {
    GlobalTableStatus["ACTIVE"] = "ACTIVE";
    GlobalTableStatus["CREATING"] = "CREATING";
    GlobalTableStatus["DELETING"] = "DELETING";
    GlobalTableStatus["UPDATING"] = "UPDATING";
})(GlobalTableStatus || (GlobalTableStatus = {}));
export var ReplicaStatus;
(function (ReplicaStatus) {
    ReplicaStatus["ACTIVE"] = "ACTIVE";
    ReplicaStatus["CREATING"] = "CREATING";
    ReplicaStatus["CREATION_FAILED"] = "CREATION_FAILED";
    ReplicaStatus["DELETING"] = "DELETING";
    ReplicaStatus["INACCESSIBLE_ENCRYPTION_CREDENTIALS"] = "INACCESSIBLE_ENCRYPTION_CREDENTIALS";
    ReplicaStatus["REGION_DISABLED"] = "REGION_DISABLED";
    ReplicaStatus["UPDATING"] = "UPDATING";
})(ReplicaStatus || (ReplicaStatus = {}));
export var TableClass;
(function (TableClass) {
    TableClass["STANDARD"] = "STANDARD";
    TableClass["STANDARD_INFREQUENT_ACCESS"] = "STANDARD_INFREQUENT_ACCESS";
})(TableClass || (TableClass = {}));
export class GlobalTableAlreadyExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "GlobalTableAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "GlobalTableAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, GlobalTableAlreadyExistsException.prototype);
    }
}
export var IndexStatus;
(function (IndexStatus) {
    IndexStatus["ACTIVE"] = "ACTIVE";
    IndexStatus["CREATING"] = "CREATING";
    IndexStatus["DELETING"] = "DELETING";
    IndexStatus["UPDATING"] = "UPDATING";
})(IndexStatus || (IndexStatus = {}));
export var TableStatus;
(function (TableStatus) {
    TableStatus["ACTIVE"] = "ACTIVE";
    TableStatus["ARCHIVED"] = "ARCHIVED";
    TableStatus["ARCHIVING"] = "ARCHIVING";
    TableStatus["CREATING"] = "CREATING";
    TableStatus["DELETING"] = "DELETING";
    TableStatus["INACCESSIBLE_ENCRYPTION_CREDENTIALS"] = "INACCESSIBLE_ENCRYPTION_CREDENTIALS";
    TableStatus["UPDATING"] = "UPDATING";
})(TableStatus || (TableStatus = {}));
export class ResourceInUseException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceInUseException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
    }
}
export var ReturnValue;
(function (ReturnValue) {
    ReturnValue["ALL_NEW"] = "ALL_NEW";
    ReturnValue["ALL_OLD"] = "ALL_OLD";
    ReturnValue["NONE"] = "NONE";
    ReturnValue["UPDATED_NEW"] = "UPDATED_NEW";
    ReturnValue["UPDATED_OLD"] = "UPDATED_OLD";
})(ReturnValue || (ReturnValue = {}));
export class TransactionConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "TransactionConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "TransactionConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TransactionConflictException.prototype);
    }
}
export var ExportFormat;
(function (ExportFormat) {
    ExportFormat["DYNAMODB_JSON"] = "DYNAMODB_JSON";
    ExportFormat["ION"] = "ION";
})(ExportFormat || (ExportFormat = {}));
export var ExportStatus;
(function (ExportStatus) {
    ExportStatus["COMPLETED"] = "COMPLETED";
    ExportStatus["FAILED"] = "FAILED";
    ExportStatus["IN_PROGRESS"] = "IN_PROGRESS";
})(ExportStatus || (ExportStatus = {}));
export var S3SseAlgorithm;
(function (S3SseAlgorithm) {
    S3SseAlgorithm["AES256"] = "AES256";
    S3SseAlgorithm["KMS"] = "KMS";
})(S3SseAlgorithm || (S3SseAlgorithm = {}));
export class ExportNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ExportNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ExportNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ExportNotFoundException.prototype);
    }
}
export class GlobalTableNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "GlobalTableNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "GlobalTableNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, GlobalTableNotFoundException.prototype);
    }
}
export var ImportStatus;
(function (ImportStatus) {
    ImportStatus["CANCELLED"] = "CANCELLED";
    ImportStatus["CANCELLING"] = "CANCELLING";
    ImportStatus["COMPLETED"] = "COMPLETED";
    ImportStatus["FAILED"] = "FAILED";
    ImportStatus["IN_PROGRESS"] = "IN_PROGRESS";
})(ImportStatus || (ImportStatus = {}));
export var InputCompressionType;
(function (InputCompressionType) {
    InputCompressionType["GZIP"] = "GZIP";
    InputCompressionType["NONE"] = "NONE";
    InputCompressionType["ZSTD"] = "ZSTD";
})(InputCompressionType || (InputCompressionType = {}));
export var InputFormat;
(function (InputFormat) {
    InputFormat["CSV"] = "CSV";
    InputFormat["DYNAMODB_JSON"] = "DYNAMODB_JSON";
    InputFormat["ION"] = "ION";
})(InputFormat || (InputFormat = {}));
export class ImportNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ImportNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ImportNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ImportNotFoundException.prototype);
    }
}
export var DestinationStatus;
(function (DestinationStatus) {
    DestinationStatus["ACTIVE"] = "ACTIVE";
    DestinationStatus["DISABLED"] = "DISABLED";
    DestinationStatus["DISABLING"] = "DISABLING";
    DestinationStatus["ENABLE_FAILED"] = "ENABLE_FAILED";
    DestinationStatus["ENABLING"] = "ENABLING";
})(DestinationStatus || (DestinationStatus = {}));
export class DuplicateItemException extends __BaseException {
    constructor(opts) {
        super({
            name: "DuplicateItemException",
            $fault: "client",
            ...opts,
        });
        this.name = "DuplicateItemException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DuplicateItemException.prototype);
    }
}
export class IdempotentParameterMismatchException extends __BaseException {
    constructor(opts) {
        super({
            name: "IdempotentParameterMismatchException",
            $fault: "client",
            ...opts,
        });
        this.name = "IdempotentParameterMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IdempotentParameterMismatchException.prototype);
        this.Message = opts.Message;
    }
}
export class TransactionInProgressException extends __BaseException {
    constructor(opts) {
        super({
            name: "TransactionInProgressException",
            $fault: "client",
            ...opts,
        });
        this.name = "TransactionInProgressException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TransactionInProgressException.prototype);
        this.Message = opts.Message;
    }
}
export class ExportConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ExportConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ExportConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ExportConflictException.prototype);
    }
}
export class InvalidExportTimeException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidExportTimeException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidExportTimeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidExportTimeException.prototype);
    }
}
export class PointInTimeRecoveryUnavailableException extends __BaseException {
    constructor(opts) {
        super({
            name: "PointInTimeRecoveryUnavailableException",
            $fault: "client",
            ...opts,
        });
        this.name = "PointInTimeRecoveryUnavailableException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PointInTimeRecoveryUnavailableException.prototype);
    }
}
export class ImportConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ImportConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ImportConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ImportConflictException.prototype);
    }
}
export var Select;
(function (Select) {
    Select["ALL_ATTRIBUTES"] = "ALL_ATTRIBUTES";
    Select["ALL_PROJECTED_ATTRIBUTES"] = "ALL_PROJECTED_ATTRIBUTES";
    Select["COUNT"] = "COUNT";
    Select["SPECIFIC_ATTRIBUTES"] = "SPECIFIC_ATTRIBUTES";
})(Select || (Select = {}));
export class TableAlreadyExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "TableAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TableAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TableAlreadyExistsException.prototype);
    }
}
export class InvalidRestoreTimeException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidRestoreTimeException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRestoreTimeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRestoreTimeException.prototype);
    }
}
export class ReplicaAlreadyExistsException extends __BaseException {
    constructor(opts) {
        super({
            name: "ReplicaAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "ReplicaAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ReplicaAlreadyExistsException.prototype);
    }
}
export class ReplicaNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ReplicaNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ReplicaNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ReplicaNotFoundException.prototype);
    }
}
export class IndexNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "IndexNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "IndexNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IndexNotFoundException.prototype);
    }
}
export var AttributeValue;
(function (AttributeValue) {
    AttributeValue.visit = (value, visitor) => {
        if (value.S !== undefined)
            return visitor.S(value.S);
        if (value.N !== undefined)
            return visitor.N(value.N);
        if (value.B !== undefined)
            return visitor.B(value.B);
        if (value.SS !== undefined)
            return visitor.SS(value.SS);
        if (value.NS !== undefined)
            return visitor.NS(value.NS);
        if (value.BS !== undefined)
            return visitor.BS(value.BS);
        if (value.M !== undefined)
            return visitor.M(value.M);
        if (value.L !== undefined)
            return visitor.L(value.L);
        if (value.NULL !== undefined)
            return visitor.NULL(value.NULL);
        if (value.BOOL !== undefined)
            return visitor.BOOL(value.BOOL);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(AttributeValue || (AttributeValue = {}));
export class TransactionCanceledException extends __BaseException {
    constructor(opts) {
        super({
            name: "TransactionCanceledException",
            $fault: "client",
            ...opts,
        });
        this.name = "TransactionCanceledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TransactionCanceledException.prototype);
        this.Message = opts.Message;
        this.CancellationReasons = opts.CancellationReasons;
    }
}
