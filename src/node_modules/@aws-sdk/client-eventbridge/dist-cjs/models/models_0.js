"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PolicyLengthExceededException = exports.PropagateTags = exports.PlacementStrategyType = exports.PlacementConstraintType = exports.LaunchType = exports.RuleState = exports.EventSourceState = exports.ManagedRuleException = exports.EndpointState = exports.ReplicationState = exports.ConnectionState = exports.ConnectionOAuthHttpMethod = exports.ConnectionAuthorizationType = exports.InvalidEventPatternException = exports.ResourceAlreadyExistsException = exports.LimitExceededException = exports.IllegalStatusException = exports.ReplayState = exports.AssignPublicIp = exports.ArchiveState = exports.ApiDestinationHttpMethod = exports.ApiDestinationState = exports.ResourceNotFoundException = exports.OperationDisabledException = exports.InvalidStateException = exports.InternalException = exports.ConcurrentModificationException = void 0;
const EventBridgeServiceException_1 = require("./EventBridgeServiceException");
class ConcurrentModificationException extends EventBridgeServiceException_1.EventBridgeServiceException {
    constructor(opts) {
        super({
            name: "ConcurrentModificationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConcurrentModificationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConcurrentModificationException.prototype);
    }
}
exports.ConcurrentModificationException = ConcurrentModificationException;
class InternalException extends EventBridgeServiceException_1.EventBridgeServiceException {
    constructor(opts) {
        super({
            name: "InternalException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalException.prototype);
    }
}
exports.InternalException = InternalException;
class InvalidStateException extends EventBridgeServiceException_1.EventBridgeServiceException {
    constructor(opts) {
        super({
            name: "InvalidStateException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidStateException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidStateException.prototype);
    }
}
exports.InvalidStateException = InvalidStateException;
class OperationDisabledException extends EventBridgeServiceException_1.EventBridgeServiceException {
    constructor(opts) {
        super({
            name: "OperationDisabledException",
            $fault: "client",
            ...opts,
        });
        this.name = "OperationDisabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OperationDisabledException.prototype);
    }
}
exports.OperationDisabledException = OperationDisabledException;
class ResourceNotFoundException extends EventBridgeServiceException_1.EventBridgeServiceException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
exports.ResourceNotFoundException = ResourceNotFoundException;
var ApiDestinationState;
(function (ApiDestinationState) {
    ApiDestinationState["ACTIVE"] = "ACTIVE";
    ApiDestinationState["INACTIVE"] = "INACTIVE";
})(ApiDestinationState = exports.ApiDestinationState || (exports.ApiDestinationState = {}));
var ApiDestinationHttpMethod;
(function (ApiDestinationHttpMethod) {
    ApiDestinationHttpMethod["DELETE"] = "DELETE";
    ApiDestinationHttpMethod["GET"] = "GET";
    ApiDestinationHttpMethod["HEAD"] = "HEAD";
    ApiDestinationHttpMethod["OPTIONS"] = "OPTIONS";
    ApiDestinationHttpMethod["PATCH"] = "PATCH";
    ApiDestinationHttpMethod["POST"] = "POST";
    ApiDestinationHttpMethod["PUT"] = "PUT";
})(ApiDestinationHttpMethod = exports.ApiDestinationHttpMethod || (exports.ApiDestinationHttpMethod = {}));
var ArchiveState;
(function (ArchiveState) {
    ArchiveState["CREATE_FAILED"] = "CREATE_FAILED";
    ArchiveState["CREATING"] = "CREATING";
    ArchiveState["DISABLED"] = "DISABLED";
    ArchiveState["ENABLED"] = "ENABLED";
    ArchiveState["UPDATE_FAILED"] = "UPDATE_FAILED";
    ArchiveState["UPDATING"] = "UPDATING";
})(ArchiveState = exports.ArchiveState || (exports.ArchiveState = {}));
var AssignPublicIp;
(function (AssignPublicIp) {
    AssignPublicIp["DISABLED"] = "DISABLED";
    AssignPublicIp["ENABLED"] = "ENABLED";
})(AssignPublicIp = exports.AssignPublicIp || (exports.AssignPublicIp = {}));
var ReplayState;
(function (ReplayState) {
    ReplayState["CANCELLED"] = "CANCELLED";
    ReplayState["CANCELLING"] = "CANCELLING";
    ReplayState["COMPLETED"] = "COMPLETED";
    ReplayState["FAILED"] = "FAILED";
    ReplayState["RUNNING"] = "RUNNING";
    ReplayState["STARTING"] = "STARTING";
})(ReplayState = exports.ReplayState || (exports.ReplayState = {}));
class IllegalStatusException extends EventBridgeServiceException_1.EventBridgeServiceException {
    constructor(opts) {
        super({
            name: "IllegalStatusException",
            $fault: "client",
            ...opts,
        });
        this.name = "IllegalStatusException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IllegalStatusException.prototype);
    }
}
exports.IllegalStatusException = IllegalStatusException;
class LimitExceededException extends EventBridgeServiceException_1.EventBridgeServiceException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
exports.LimitExceededException = LimitExceededException;
class ResourceAlreadyExistsException extends EventBridgeServiceException_1.EventBridgeServiceException {
    constructor(opts) {
        super({
            name: "ResourceAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceAlreadyExistsException.prototype);
    }
}
exports.ResourceAlreadyExistsException = ResourceAlreadyExistsException;
class InvalidEventPatternException extends EventBridgeServiceException_1.EventBridgeServiceException {
    constructor(opts) {
        super({
            name: "InvalidEventPatternException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidEventPatternException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidEventPatternException.prototype);
    }
}
exports.InvalidEventPatternException = InvalidEventPatternException;
var ConnectionAuthorizationType;
(function (ConnectionAuthorizationType) {
    ConnectionAuthorizationType["API_KEY"] = "API_KEY";
    ConnectionAuthorizationType["BASIC"] = "BASIC";
    ConnectionAuthorizationType["OAUTH_CLIENT_CREDENTIALS"] = "OAUTH_CLIENT_CREDENTIALS";
})(ConnectionAuthorizationType = exports.ConnectionAuthorizationType || (exports.ConnectionAuthorizationType = {}));
var ConnectionOAuthHttpMethod;
(function (ConnectionOAuthHttpMethod) {
    ConnectionOAuthHttpMethod["GET"] = "GET";
    ConnectionOAuthHttpMethod["POST"] = "POST";
    ConnectionOAuthHttpMethod["PUT"] = "PUT";
})(ConnectionOAuthHttpMethod = exports.ConnectionOAuthHttpMethod || (exports.ConnectionOAuthHttpMethod = {}));
var ConnectionState;
(function (ConnectionState) {
    ConnectionState["AUTHORIZED"] = "AUTHORIZED";
    ConnectionState["AUTHORIZING"] = "AUTHORIZING";
    ConnectionState["CREATING"] = "CREATING";
    ConnectionState["DEAUTHORIZED"] = "DEAUTHORIZED";
    ConnectionState["DEAUTHORIZING"] = "DEAUTHORIZING";
    ConnectionState["DELETING"] = "DELETING";
    ConnectionState["UPDATING"] = "UPDATING";
})(ConnectionState = exports.ConnectionState || (exports.ConnectionState = {}));
var ReplicationState;
(function (ReplicationState) {
    ReplicationState["DISABLED"] = "DISABLED";
    ReplicationState["ENABLED"] = "ENABLED";
})(ReplicationState = exports.ReplicationState || (exports.ReplicationState = {}));
var EndpointState;
(function (EndpointState) {
    EndpointState["ACTIVE"] = "ACTIVE";
    EndpointState["CREATE_FAILED"] = "CREATE_FAILED";
    EndpointState["CREATING"] = "CREATING";
    EndpointState["DELETE_FAILED"] = "DELETE_FAILED";
    EndpointState["DELETING"] = "DELETING";
    EndpointState["UPDATE_FAILED"] = "UPDATE_FAILED";
    EndpointState["UPDATING"] = "UPDATING";
})(EndpointState = exports.EndpointState || (exports.EndpointState = {}));
class ManagedRuleException extends EventBridgeServiceException_1.EventBridgeServiceException {
    constructor(opts) {
        super({
            name: "ManagedRuleException",
            $fault: "client",
            ...opts,
        });
        this.name = "ManagedRuleException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ManagedRuleException.prototype);
    }
}
exports.ManagedRuleException = ManagedRuleException;
var EventSourceState;
(function (EventSourceState) {
    EventSourceState["ACTIVE"] = "ACTIVE";
    EventSourceState["DELETED"] = "DELETED";
    EventSourceState["PENDING"] = "PENDING";
})(EventSourceState = exports.EventSourceState || (exports.EventSourceState = {}));
var RuleState;
(function (RuleState) {
    RuleState["DISABLED"] = "DISABLED";
    RuleState["ENABLED"] = "ENABLED";
})(RuleState = exports.RuleState || (exports.RuleState = {}));
var LaunchType;
(function (LaunchType) {
    LaunchType["EC2"] = "EC2";
    LaunchType["EXTERNAL"] = "EXTERNAL";
    LaunchType["FARGATE"] = "FARGATE";
})(LaunchType = exports.LaunchType || (exports.LaunchType = {}));
var PlacementConstraintType;
(function (PlacementConstraintType) {
    PlacementConstraintType["DISTINCT_INSTANCE"] = "distinctInstance";
    PlacementConstraintType["MEMBER_OF"] = "memberOf";
})(PlacementConstraintType = exports.PlacementConstraintType || (exports.PlacementConstraintType = {}));
var PlacementStrategyType;
(function (PlacementStrategyType) {
    PlacementStrategyType["BINPACK"] = "binpack";
    PlacementStrategyType["RANDOM"] = "random";
    PlacementStrategyType["SPREAD"] = "spread";
})(PlacementStrategyType = exports.PlacementStrategyType || (exports.PlacementStrategyType = {}));
var PropagateTags;
(function (PropagateTags) {
    PropagateTags["TASK_DEFINITION"] = "TASK_DEFINITION";
})(PropagateTags = exports.PropagateTags || (exports.PropagateTags = {}));
class PolicyLengthExceededException extends EventBridgeServiceException_1.EventBridgeServiceException {
    constructor(opts) {
        super({
            name: "PolicyLengthExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "PolicyLengthExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PolicyLengthExceededException.prototype);
    }
}
exports.PolicyLengthExceededException = PolicyLengthExceededException;
