{"version":3,"file":"whr.cjs.production.min.js","sources":["../src/player-day.ts","../src/player.ts","../src/game.ts","../src/whr.ts"],"sourcesContent":["import Player from './player'\nimport Game from './game';\nimport { UnstableRatingException } from './whr';\n\nexport default class PlayerDay {\n    // attr_accessor :won_games, :lost_games, :name, :day, :player, :r, :is_first_day, :uncertainty\n    player: Player\n    day: number\n    isFirstDay: boolean\n    wonGames: Game[]\n    lostGames: Game[]\n    _wonGameTerms: number[][] | null\n    _lostGameTerms: number[][] | null\n    uncertainty: null | number\n    r!: number\n\n    // TODO: Find out what day type is\n    constructor(player: Player, day: number) {\n        this.player = player\n        this.day = day\n        this.isFirstDay = false\n        this.wonGames = []\n        this.lostGames = []\n        this._wonGameTerms = null\n        this._lostGameTerms = null\n        this.uncertainty = null\n    }\n\n    set gamma(gamma: number) {\n        this.r = Math.log(gamma)\n    }\n\n    get gamma(): number {\n        return Math.exp(this.r)\n    }\n\n    set elo(elo: number) {\n        this.r = elo * (Math.log(10) / 400.0)\n    }\n\n    get elo(): number {\n        return (this.r * 400.0) / (Math.log(10))\n    }\n\n    get logLikelihood(): number {\n        return 0\n    }\n\n    clearGameTermsCache() {\n        this._wonGameTerms = null\n        this._lostGameTerms = null\n    }\n\n    get wonGameTerms() {\n        if (!this._wonGameTerms) {\n            this._wonGameTerms = this.wonGames.map((g: Game) => {\n                let otherGamma = g.opponentsAdjustedGamma(this.player)\n                if (otherGamma === 0 || isNaN(otherGamma) || !isFinite(otherGamma)) {\n                    throw new UnstableRatingException(`otherGamma (${g.opponent(this.player).inspect}) = ${otherGamma}`)\n                }\n                return [1.0, 0.0, 1.0, otherGamma]\n            })\n            if (this.isFirstDay) {\n                this._wonGameTerms!.push([1.0, 0.0, 1.0, 1.0]) // win against virtual player ranked with gamma = 1.0\n            }\n        }\n        return this._wonGameTerms\n    }\n\n    get lostGameTerms() {\n        if (!this._lostGameTerms) {\n            this._lostGameTerms = this.lostGames.map((g: Game) => {\n                let otherGamma = g.opponentsAdjustedGamma(this.player)\n                if (otherGamma === 0 || isNaN(otherGamma) || !isFinite(otherGamma)) {\n                    console.log(`otherGamma (${g.opponent(this.player).inspect}) = ${otherGamma}`)\n                }\n                return [0.0, otherGamma, 1.0, otherGamma]\n            })\n            if (this.isFirstDay) {\n                this._lostGameTerms!.push([0.0, 1.0, 1.0, 1.0]) // loss against virtual player ranked with gamma = 1.0\n            }\n        }\n        return this._lostGameTerms\n    }\n\n    get logLikelihoodSecondDerivative(): number {\n        let sum = 0.0\n        let terms = this.wonGameTerms!.concat(this.lostGameTerms)\n        terms.forEach((term: number[]) => {\n            let c = term[2], d = term[3]\n            sum += (c * d) / ((c * this.gamma + d) ** 2.0)\n        })\n        if(isNaN(this.gamma)) throw new UnstableRatingException(`Gamma cannot be NaN`)\n        if(isNaN(sum)) throw new UnstableRatingException(`Sum cannot be NaN`)\n        return -1 * this.gamma * sum\n    }\n\n    get logLikelihoodDerivative(): number {\n        let tally = 0\n        let terms = this.wonGameTerms!.concat(this.lostGameTerms)\n        terms.forEach((term: number[]) => {\n            let c = term[2], d = term[3]\n            tally += c / (c * this.gamma + d)\n        })\n        return this.wonGameTerms!.length - this.gamma * tally\n    }\n\n    addGame(game: Game) {\n        if ((game.winner == \"W\" && game.whitePlayer === this.player) ||\n            (game.winner == \"B\" && game.blackPlayer === this.player)) {\n            this.wonGames.push(game)\n        } else {\n            this.lostGames.push(game)\n        }\n    }\n\n    updateBy1DNewtonsMethod() {\n        let dlogp = this.logLikelihoodDerivative\n        let d2logp = this.logLikelihoodSecondDerivative\n        let dr = (dlogp / d2logp)\n        let new_r = this.r - dr\n        this.r = new_r\n    }\n\n}","import { UnstableRatingException } from './whr'\nimport PlayerDay from './player-day'\nimport Game from './game'\nimport { Config } from './whr'\n\n\nexport default class Player {\n    name: string\n    anchor_gamma: any\n    days: PlayerDay[]\n    debug: boolean | undefined\n    w2: number\n    //:days, :w2, :debug, :id\n    constructor(name: string, config: Config) {\n        this.name = name\n        this.anchor_gamma\n        this.days = []\n        this.debug = config.debug\n        this.w2 = (Math.sqrt(config.w2!) * Math.log(10) / 400) ** 2 // Convert from elo^2 to r^2\n    }\n\n    get inspect(): string {\n        return `<Player:${Object.entries(this).map((arr: any[]) => `${arr[0]}=${arr[1]}`).join(',')}>`\n    }\n\n    get logLikelihood(): number {\n        let sum = 0.0\n        let sigma2: number[] = this.computeSigma2()\n        let days = this.days\n        let n = days.length\n\n        for (let i = 0; i < n; i++) {\n            let prior = 0\n            if (i < n) {\n                let rd = days[i].r - days[i + 1].r\n                prior += (1 / (Math.sqrt(2 * Math.PI * sigma2[i]))) * Math.exp(-(rd ** 2) / 2 * sigma2[i])\n            }\n            if (i > 0) {\n                let rd = days[i].r - days[i - 1].r\n                prior += (1 / (Math.sqrt(2 * Math.PI * sigma2[i - 1]))) * Math.exp(-(rd ** 2) / 2 * sigma2[i - 1])\n            }\n            if (prior == 0) {\n                sum += days[i].logLikelihood\n            } else {\n                if (!isFinite(days[i].logLikelihood) || !isFinite(Math.log(prior))) {\n                    throw new UnstableRatingException(`Infinity at ${this.inspect}: ${days[i].logLikelihood} + ${Math.log(prior)}: prior = ${prior}, days = ${JSON.stringify(this.days)}`)\n                }\n                sum += days[i].logLikelihood + Math.log(prior)\n            }\n        }\n        return sum\n    }\n\n    hessian(days: PlayerDay[], sigma2: number[]): number[][] {\n        let n = days.length\n        // Create an n by n matrix\n        let matrix = new Array(n).fill(new Array(n).fill(null))\n        return matrix.map((_y: any, row: number) => _y.map((_x: any, col: number) => {\n            if (row == col) {\n                let prior = 0\n                if (row < (n - 1)) prior += -1.0 / sigma2[row]\n                if (row > 0) prior += -1.0 / sigma2[row - 1]\n                return days[row].logLikelihoodSecondDerivative + prior - 0.001\n            } else if (row == col - 1) {\n                return 1.0 / sigma2[row]\n            } else if (row == col + 1) {\n                return 1.0 / sigma2[col]\n            } else {\n                return 0\n            }\n        }))\n    }\n\n    gradient(r: number[], days: PlayerDay[], sigma2: number[]): number[] {\n        let g: number[] = []\n        let n = this.days.length\n        days.forEach((day, idx) => {\n            let prior = 0\n            if (idx < (n - 1)) prior += -(r[idx] - r[idx + 1]) / sigma2[idx]\n            if (idx > 0) prior += -(r[idx] - r[idx - 1]) / sigma2[idx - 1]\n            if (this.debug) console.log(`g[${idx}] = ${day.logLikelihoodDerivative} + ${prior}`)\n            g.push(day.logLikelihoodDerivative + prior)\n        })\n        return g\n    }\n\n    runOneNewtonIteration(): void {\n        this.days.forEach(day => {\n            day.clearGameTermsCache()\n        })\n\n        if (this.days.length == 1) {\n            this.days[0].updateBy1DNewtonsMethod()\n        } else if (this.days.length > 1) {\n            this.updateByNDimNewton()\n        }\n    }\n\n    computeSigma2(): number[] {\n        let sigma2: number[] = []\n        this.days.forEach((d1, i) => {\n            if (i == 0) return\n            let d2 = this.days[i - 1]\n            sigma2.push(Math.abs(d2.day - d1.day) * this.w2)\n        })\n        return sigma2\n    }\n\n\n    updateByNDimNewton() {\n        // r\n        let r = this.days.map(day => day.r)\n    \n        if (this.debug) {\n            console.log(`Updating ${this.inspect}`)\n            this.days.forEach(day => {\n                console.log(`day[${day.day}] r = ${day.r}`)\n                console.log(`day[${day.day}] win terms = ${day.wonGameTerms}`)\n                console.log(`day[${day.day}] win games = ${day.wonGames}`)\n                console.log(`day[${day.day}] lose terms = ${day.lostGameTerms}`)\n                console.log(`day[${day.day}] lost games = ${day.lostGames}`)\n                console.log(`day[${day.day}] log(p) = ${day.logLikelihood}`)\n                console.log(`day[${day.day}] dlp = ${day.logLikelihoodDerivative}`)\n                console.log(`day[${day.day}] dlp2 = ${day.logLikelihoodSecondDerivative}`)\n            })\n        }\n    \n        // sigma squared (used in the prior)\n        let sigma2 = this.computeSigma2()\n    \n        let h = this.hessian(this.days, sigma2)\n        let g = this.gradient(r, this.days, sigma2)\n    \n        let a: number[] = []\n        let d = [h[0][0]]\n        let b = [h[0][1]]\n    \n        let n = r.length\n        for(let i = 1; i < n; i++) {\n            a[i] = h[i][i-1] / d[i-1]\n            d[i] = h[i][i] - a[i] * b[i-1]\n            b[i] = h[i][i+1]\n        }\n    \n        let y: number[] = [g[0]]\n        for(let i = 1; i < n; i++) {\n            y[i] = g[i] - a[i] * y[i-1]\n        }\n    \n        let x: number[] = []\n        x[n-1] = y[n-1] / d[n-1]\n        for(let i = n-2; i >= 0; i--){\n            x[i] = (y[i] - b[i] * x[i+1]) / d[i]\n        }\n\n        // JS Array.zip implementation\n        let newR = a.map((e, i) => [e, x[i]]).map(i => i[0] - i[1])\n    \n        newR.forEach(r => {\n            if (r > 650)\n                throw new UnstableRatingException(`Unstable r (${newR}) on player ${this.inspect}`)\n        })\n    \n        if (this.debug) {\n            console.log(`Hessian = ${h}`)\n            console.log(`gradient = ${g}`)\n            console.log(`a = ${a}`)\n            console.log(`d = ${d}`)\n            console.log(`b = ${b}`)\n            console.log(`y = ${y}`)\n            console.log(`x = ${x}`)\n            console.log(`${this.inspect} (${r}) => (${newR})`)\n        }\n    \n        this.days.forEach((day,idx) => {\n            day.r = day.r - x[idx]\n        })\n    }\n\n    get covariance() {\n      let r = this.days.map(day => day.r)\n    \n      let sigma2 = this.computeSigma2()\n      let h = this.hessian(this.days, sigma2)\n      //let g = this.gradient(r, this.days, sigma2)\n    \n      let n = this.days.length\n    \n      let a: number[] = []\n      let d = [h[0][0]]\n      let b = [h[0][1]]\n    \n      n = r.length\n      for(let i = 1; i < n; i++) {\n        a[i] = h[i][i-1] / d[i-1]\n        d[i] = h[i][i] - a[i] * b[i-1]\n        b[i] = h[i][i+1]\n      }\n\n      let dp = []\n      dp[n-1] = h[n-1][n-1]    \n      let bp = []\n      bp[n-1] = h[n-1][n-2]\n      let ap = []\n      for(let i = n - 2; i >= 0; i--) {\n        ap[i] = h[i][i+1] / dp[i+1]\n        dp[i] = h[i][i] - ap[i]*bp[i+1]\n        bp[i] = h[i][i-1]\n      }\n    \n      let v: number[] = []\n      for(let i = 0; i < n-1; i++) {\n        v[i] = dp[i+1]/(b[i]*bp[i+1] - d[i]*dp[i+1])\n      }\n      v[n-1] = -1/d[n-1]\n    \n      let matrix = new Array(n).fill(new Array(n).fill(null))\n      return matrix.map((_y: any, row: number) => _y.map((_x: any, col: number) => {\n        if(row == col)\n            return v[row]\n        else if(row == col-1)\n            return -1*a[col]*v[col]\n        else\n          return 0\n      }))\n    }\n    \n    updateUncertainty() {\n      if(this.days.length > 0) {\n        let c = this.covariance\n        let u = this.days.map((_e,i) => c[i][i])\n        let zipped =  this.days.map((d, i) => [d, u[i]]).map(e => e[0].uncertainty = e[1])\n        return zipped\n      }\n      else\n        return 5\n    }\n\n    addGame(game: Game): void {\n        let lastDay = this.days.slice(-1)[0]\n        if(!lastDay || lastDay.day != game.day) {\n            let newPday = new PlayerDay(this, game.day)\n            if(this.days.length == 0) {\n                newPday.isFirstDay = true\n                newPday.gamma = 1\n            } else {\n                newPday.gamma = lastDay.gamma\n            }\n            lastDay = newPday\n            this.days.push(newPday)\n        }\n        if (game.whitePlayer === this) {\n            game.wpd = lastDay\n        } else {\n            game.bpd = lastDay\n        }\n        lastDay.addGame(game)\n    }\n\n}","import Player from './player'\nimport { UnstableRatingException, RatingException } from './whr'\nimport PlayerDay from './player-day'\n\nexport default class Game {\n\n    day: number\n    whitePlayer: Player\n    blackPlayer: Player\n    winner: string\n    _handicap: number | Function\n    wpd: PlayerDay | null\n    bpd: PlayerDay | null\n    extras: object\n\n    constructor(black: Player, white: Player, winner: string, timeStep: number, handicap: number | Function, extras?: object) {\n        this.day = timeStep\n        this.whitePlayer = white\n        this.blackPlayer = black\n        this.winner = winner\n        this._handicap = handicap || 0\n\n        this.wpd = null\n        this.bpd = null\n        this.extras = extras || {}\n    }\n\n    get inspect(): string {\n      return `<Game:${Object.entries(this).map((arr: any[]) => `${arr[0]}=${arr[1]}`).join(',')}>`\n    }\n\n    get handicap(): number {\n        if(this._handicap instanceof Function) return this._handicap()\n        return this._handicap\n    }\n\n    opponentsAdjustedGamma(player: Player) {\n      let blackAdvantage = this.handicap\n      let opponentElo\n      if (player === this.whitePlayer)\n        opponentElo = this.bpd!.elo + blackAdvantage\n      else if (player === this.blackPlayer)\n        opponentElo = this.wpd!.elo - blackAdvantage\n      else\n        throw new RatingException(`No opponent for ${player.name}, since they're not in this game: ${this}.`)\n      let rval = 10**(opponentElo/400.0)\n      if (rval == 0 || !isFinite(rval) || isNaN(rval))\n        throw new UnstableRatingException(`Bad adjusted gamma: ${this}`)\n      return rval\n    }\n\n    opponent(player: Player) {\n        if(player == this.whitePlayer)\n            return this.blackPlayer\n        return this.whitePlayer\n    }\n\n    get predictionScore(): number {\n      if (this.whiteWinProbability == 0.5)\n        return 0.5\n      else\n        return ((this.winner == \"W\" && this.whiteWinProbability > 0.5) || (this.winner == \"B\" && this.whiteWinProbability < 0.5)) ? 1.0 : 0.0\n    }\n\n    // This is the Bradley-Terry Model\n    get whiteWinProbability() {\n      return this.wpd!.gamma/(this.wpd!.gamma + this.opponentsAdjustedGamma(this.whitePlayer))\n    }\n  \n    get blackWinProbability() {\n        return this.bpd!.gamma/(this.bpd!.gamma + this.opponentsAdjustedGamma(this.blackPlayer))\n    }\n}","import Player from './player'\nimport Game from './game'\nimport PlayerDay from './player-day'\n\nexport interface Config {\n    debug?: boolean\n    w2?: number\n    players?: Map<string, Player>\n    games?: Array<Game>\n}\n\nexport class RatingException extends Error {}\n\nexport class UnstableRatingException extends RatingException {}\n\n/**\n * Base class for WHR.\n */\nexport default class WholeHistoryRating {\n    config: Config\n    players: Map<string, Player>\n    games: Game[]\n    constructor(config?: Config) {\n        this.config    = config          || {}\n        this.config.w2 = this.config.w2      || 300.0\n        this.games     = this.config.games   || []\n        this.players   = this.config.players || new Map<string, Player>()\n    }\n\n    get inspect() {\n        return this\n    }\n\n    printOrderedRatings() {\n        let players = Array.from(this.players.values()).filter(p => p.days.length > 0)\n        players.forEach(p => console.log(`${p.name} => ${p.days.map(day => day.elo).join(', ')}`))\n    }\n\n    logLikelihood(): number {\n        let score = 0.0\n        Object.values(this.players).forEach((p: Player) => {\n        if(p.days.length > 0)\n            score += p.logLikelihood\n        })\n        return score\n    }\n\n    playerByName(name: string): Player {\n        let player = this.players.get(name)\n        if(!player) {\n            player = new Player(name, this.config)\n            this.players.set(name, player)\n        }\n        return player\n    }\n    \n    ratingsForPlayer(name: string) {\n        let player: Player = this.playerByName(name)\n        return player.days.map((d: PlayerDay) => [d.day, Math.round(d.elo), Math.round(d.uncertainty!*100)])\n    }\n  \n    setupGame(black: string, white: string, winner: string, timeStep: number, handicap: number, extras = {}) {\n        // Avoid self-played games (no info)\n        if (black == white) {\n            throw new RatingException(\"Invalid game, player cannot play with themself\")\n        }\n        let whitePlayer = this.playerByName(white)\n        let blackPlayer = this.playerByName(black)\n\n        return new Game(blackPlayer, whitePlayer, winner, timeStep, handicap, extras)\n    }\n  \n    createGame(black: string, white: string, winner: string, timeStep: number, handicap: number, extras: object = {}) {\n        const game: Game = this.setupGame(black, white, winner, timeStep, handicap, extras)\n        return this.addGame(game)\n    }\n\n    addGame(game: Game) {\n        game.whitePlayer.addGame(game)\n        game.blackPlayer.addGame(game)\n        if(!game.bpd) {\n            throw new RatingException(`Bad game: ${game.inspect}`)\n        }\n        this.games.push(game)\n        return game\n    }\n  \n    iterate(count: number): void {\n        for(let i = 0; i < count; i++) {\n            this.runOneIteration()\n        }\n        this.players.forEach((p: Player) => p.updateUncertainty())\n    }\n\n    runOneIteration(): void {\n        this.players.forEach((p: Player) => p.runOneNewtonIteration())\n    }\n}"],"names":["PlayerDay","player","day","isFirstDay","wonGames","lostGames","_wonGameTerms","_lostGameTerms","uncertainty","clearGameTermsCache","addGame","game","winner","whitePlayer","this","blackPlayer","push","updateBy1DNewtonsMethod","r","logLikelihoodDerivative","logLikelihoodSecondDerivative","gamma","Math","log","exp","elo","map","g","otherGamma","opponentsAdjustedGamma","_this","isNaN","isFinite","UnstableRatingException","opponent","inspect","_this2","console","sum","wonGameTerms","concat","lostGameTerms","forEach","term","c","d","_this3","tally","_this4","length","Player","name","config","days","debug","w2","sqrt","hessian","sigma2","n","Array","fill","_y","row","_x","col","prior","gradient","idx","runOneNewtonIteration","updateByNDimNewton","computeSigma2","d1","i","abs","logLikelihood","h","a","b","y","x","newR","e","updateUncertainty","covariance","u","_e","lastDay","slice","newPday","wpd","bpd","Object","entries","arr","join","rd","PI","JSON","stringify","dp","bp","ap","v","Game","black","white","timeStep","handicap","extras","_handicap","opponentElo","blackAdvantage","RatingException","rval","Function","whiteWinProbability","Error","WholeHistoryRating","games","players","Map","printOrderedRatings","from","values","filter","p","score","playerByName","get","set","ratingsForPlayer","round","setupGame","createGame","iterate","count","runOneIteration"],"mappings":"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"}